{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API Gateway Service Management Service allows you to manage the APIs in the API Gateway. Any user with the 'Manage APIs' functional privilege can manage the APIs in the API Gateway. By default, the users who are part of either API-Gateway-Providers or API-Gateway-Administrators groups will have this privilege.\n\nAPI Gateway supports four types of APIs - REST APIs, SOAP APIs, WebSocket APIs and OData APIs. REST APIs can be created by providing the swagger (file/url), openAPI (file/url), raml (file/url) or can be created from scratch. SOAP APIs can be created using the WSDL (file/url). If the API definitions has reference schemas, then an archive containing all the definitions can be provided as an input. WebSocket APIs can be created from scratch. OData APIs can be created using their service document or metadata document url.\n\nThis service provides you with the options to create, update, read and delete of all the above API types.\n\nAn API can either be in an Active or an InActive state. An Active state indicates that the API is available for consumers. The users can use this service to activate or deactivate the API. Post activation, API Gateway generates 'Gateway Endpoints' which can be used by the API consumers to access the API.  Generally API consumers use their applications to consume the APIs.\n\nThis service can also be used to manage the API Scopes. An API Scope is a collection of resources or operations in the API. Users can create multiple scopes for a single API.\n\nOnce the API is created, users can enforce the access restrictions and other rules on the API by add the policies to the API. Policies can be attached to REST, SOAP and OData APIs.  Refer to the Policy Management API documentation for more details on the policies. Refer to the Document Management API documentation for more details on attaching documents to an API.\n\nThis service can also be used to publish/unpublish the APIs to/from a service registry.  An API in an active state can be registered (published) to one or more service registries.",
    "title": "API Gateway Service Management Service",
    "version": "10.7"
  },
  "host": "localhost:5555",
  "basePath": "/rest/apigateway",
  "paths": {
    "/apis": {
      "get": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Get all APIs or subset of APIs",
        "produces": [
          "application/json"
        ],
        "operationId": "getAPIs",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864,353bd366-47d4-4703-aecf-9cb40cdcc345",
            "description": "API Ids for the API to be retrieved",
            "name": "apiIds",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Starting index from the list of APIs to be retrieved",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of APIs to be retrieved",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of all APIs",
            "schema": {
              "$ref": "#/definitions/APIResponsesModel"
            },
            "examples": {
              "application/json": "{\r\n  \"apiResponse\": [\r\n    {\r\n      \"api\": {\r\n        \"apiName\": \"ChuckNorrisAPI\",\r\n        \"apiVersion\": \"v2\",\r\n        \"apiDescription\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n        \"isActive\": false,\r\n        \"type\": \"REST\",\r\n        \"publishedPortals\": [],\r\n        \"systemVersion\": 2,\r\n        \"id\": \"46df4227-a100-486c-9580-0bf388ec6ec7\"\r\n      },\r\n      \"responseStatus\": \"SUCCESS\"\r\n    },\r\n    {\r\n      \"api\": {\r\n        \"apiName\": \"ChuckNorrisAPI\",\r\n        \"apiVersion\": \"1.0\",\r\n        \"apiDescription\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n        \"isActive\": false,\r\n        \"type\": \"REST\",\r\n        \"publishedPortals\": [],\r\n        \"systemVersion\": 1,\r\n        \"id\": \"25fb937a-8360-41ab-8be5-987b14fe631d\"\r\n      },\r\n      \"responseStatus\": \"SUCCESS\",\r\n  \"teams\": [\r\n                {\r\n                    \"id\": \"Administrators\",\r\n                    \"name\": \"Administrators\",\r\n                    \"canDelete\": \"false\"\r\n                },\r\n                {\r\n                    \"id\": \"Default\",\r\n                    \"name\": \"Default\",\r\n                    \"canDelete\": \"true\"\r\n                }\r\n            ]\r\n      }\r\n  ]\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        }
      },
      "post": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "This REST operation is used to create an API by importing a file, url or from scratch",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "createAPI",
        "parameters": [
          {
            "x-examples": {
              "application/json": "{\r\n            \"apiDefinition\": {\r\n                \"type\": \"rest\",\r\n                \"info\": {\r\n                    \"description\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n                    \"version\": \"1.0\",\r\n                    \"title\": \"ChuckNorrisAPI\"\r\n                },\r\n                \"host\": \"api.chucknorris.io\",\r\n                \"basePath\": \"/jokes\",\r\n                \"schemes\": [\r\n                    \"https\"\r\n                ],\r\n                \"security\": [],\r\n                \"paths\": {\r\n                    \"/random\": {\r\n                        \"get\": {\r\n                            \"summary\": \"GET\",\r\n                            \"description\": \"\",\r\n                            \"operationId\": \"GET\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {},\r\n                            \"enabled\": true\r\n                        },\r\n                        \"enabled\": true\r\n                    }\r\n                },\r\n                \"securityDefinitions\": {},\r\n                \"definitions\": {},\r\n                \"baseUriParameters\": [],\r\n                \"externalDocs\": [],\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"https://api.chucknorris.io/jokes\"\r\n                    }\r\n                ],\r\n                \"components\": {\r\n                    \"schemas\": {}\r\n                }\r\n            },\r\n            \"nativeEndpoint\": [\r\n                {\r\n                    \"passSecurityHeaders\": true,\r\n                    \"uri\": \"https://api.chucknorris.io/jokes\",\r\n                    \"connectionTimeoutDuration\": 0,\r\n                    \"alias\": false\r\n                }\r\n            ],\r\n            \"apiName\": \"ChuckNorris\",\r\n            \"apiVersion\": \"1.0\",\r\n            \"apiDescription\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n            \"maturityState\": \"Beta\",\r\n            \"isActive\": false,\r\n            \"type\": \"REST\",\r\n            \"owner\": \"Administrator\",\r\n            \"policies\": [\r\n                \"08afbfa9-78e1-4c23-bb19-c0012464047e\"\r\n            ],\r\n            \"scopes\": [],\r\n            \"publishedPortals\": [],\r\n            \"creationDate\": \"2018-09-03 11:56:21 GMT\",\r\n            \"systemVersion\": 1,\r\n            \"id\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\",\r\n           \r\n\t\"teams\": [\r\n\t\t{\r\n\t\t\t\"id\": \"Default\"\r\n\t\t}\r\n\t]\r\n     }"
            },
            "description": "API request payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InputAPI"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created API object",
            "schema": {
              "$ref": "#/definitions/APIResponseCreate"
            },
            "examples": {
              "application/json": "{\r\n    \"apiResponse\": {\r\n        \"api\": {\r\n            \"apiDefinition\": {\r\n                \"type\": \"rest\",\r\n                \"info\": {\r\n                    \"description\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n                    \"version\": \"1.0\",\r\n                    \"title\": \"ChuckNorrisAPI\"\r\n                },\r\n                \"host\": \"api.chucknorris.io\",\r\n                \"basePath\": \"/jokes\",\r\n                \"schemes\": [\r\n                    \"https\"\r\n                ],\r\n                \"security\": [],\r\n                \"paths\": {\r\n                    \"/random\": {\r\n                        \"get\": {\r\n                            \"summary\": \"GET\",\r\n                            \"description\": \"\",\r\n                            \"operationId\": \"GET\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {},\r\n                            \"enabled\": true\r\n                        },\r\n                        \"enabled\": true\r\n                    }\r\n                },\r\n                \"securityDefinitions\": {},\r\n                \"definitions\": {},\r\n                \"baseUriParameters\": [],\r\n                \"externalDocs\": [],\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"https://api.chucknorris.io/jokes\"\r\n                    }\r\n                ],\r\n                \"components\": {\r\n                    \"schemas\": {}\r\n                }\r\n            },\r\n            \"nativeEndpoint\": [\r\n                {\r\n                    \"passSecurityHeaders\": true,\r\n                    \"uri\": \"https://api.chucknorris.io/jokes\",\r\n                    \"connectionTimeoutDuration\": 0,\r\n                    \"alias\": false\r\n                }\r\n            ],\r\n            \"apiName\": \"ChuckNorris\",\r\n            \"apiVersion\": \"1.0\",\r\n            \"apiDescription\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n            \"maturityState\": \"Beta\",\r\n            \"isActive\": false,\r\n            \"type\": \"REST\",\r\n            \"owner\": \"Administrator\",\r\n            \"policies\": [\r\n                \"08afbfa9-78e1-4c23-bb19-c0012464047e\"\r\n            ],\r\n            \"scopes\": [],\r\n            \"publishedPortals\": [],\r\n            \"creationDate\": \"2018-09-03 11:56:21 GMT\",\r\n            \"systemVersion\": 1,\r\n            \"id\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\"\r\n        },\r\n        \"responseStatus\": \"SUCCESS\",\r\n        \"versions\": [\r\n            {\r\n                \"versionNumber\": \"1.0\",\r\n                \"apiId\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\"\r\n            }\r\n        ],\r\n        \"teams\": [\r\n            {\r\n                \"id\": \"Administrators\",\r\n                \"name\": \"Administrators\",\r\n                \"canDelete\": \"false\"\r\n            },\r\n            {\r\n                \"id\": \"Default\",\r\n                \"name\": \"Default\",\r\n                \"canDelete\": \"true\"\r\n            }\r\n        ]   }\r\n}"
            }
          },
          "400": {
            "description": "This status code shows when the user missed the mandatory fields like type, file/url/apiDefinition in the request or provide a invalid request body"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        }
      },
      "delete": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Delete the inactive APIs",
        "produces": [
          "application/json"
        ],
        "operationId": "deleteAPIs",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864,353bd366-47d4-4703-aecf-9cb40cdcc854",
            "description": "API Ids for the APIs to be deleted. Multiple API ids combined by comma",
            "name": "apiIds",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-example": true,
            "description": "Flag for force delete. Required when API is associated with some applications",
            "name": "forceDelete",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the apiId along with the error when unsuccessful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIResponseDelete"
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "This response code returns when the mandatory parameter apiIds is missing in the query parameter"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        }
      }
    },
    "/apis/{apiId}": {
      "get": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Retrieve an API based on the API id.",
        "produces": [
          "application/json"
        ],
        "operationId": "getAPI",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to be retrieved",
            "name": "apiId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-example": "raml",
            "description": "Output format of the API. If the value is 'swagger', you get a API definition in swagger format. If the value is 'raml', you get a raml document. If the value is 'openapi', you get a open API document. If the value is 'odata', you get a zip file holding the OData metadata and service document.",
            "name": "format",
            "in": "query"
          },
          {
            "type": "string",
            "x-example": "http://hostname:5555/gateway/servicename/1.0",
            "description": "User selected endpoint for API definition in swagger/raml format.",
            "name": "url",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "If the format is swagger, returns the swagger content in json and raml returns the raml content in yaml. If the format is openapi, returns the open api content in json. If the format is odata, you get a zip file holding the OData metadata and service document.",
            "schema": {
              "$ref": "#/definitions/APIResponseGetAPI"
            },
            "examples": {
              "application/json": "{\r\n    \"apiResponse\": {\r\n        \"api\": {\r\n            \"apiDefinition\": {\r\n                \"type\": \"rest\",\r\n                \"info\": {\r\n                    \"description\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n                    \"version\": \"1.0\",\r\n                    \"title\": \"ChuckNorrisAPI\"\r\n                },\r\n                \"host\": \"api.chucknorris.io\",\r\n                \"basePath\": \"/jokes\",\r\n                \"schemes\": [\r\n                    \"https\"\r\n                ],\r\n                \"security\": [],\r\n                \"paths\": {\r\n                    \"/random\": {\r\n                        \"get\": {\r\n                            \"summary\": \"GET\",\r\n                            \"description\": \"\",\r\n                            \"operationId\": \"GET\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {},\r\n                            \"enabled\": true\r\n                        },\r\n                        \"enabled\": true\r\n                    }\r\n                },\r\n                \"securityDefinitions\": {},\r\n                \"definitions\": {},\r\n                \"baseUriParameters\": [],\r\n                \"externalDocs\": [],\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"https://api.chucknorris.io/jokes\"\r\n                    }\r\n                ],\r\n                \"components\": {\r\n                    \"schemas\": {}\r\n                }\r\n            },\r\n            \"nativeEndpoint\": [\r\n                {\r\n                    \"passSecurityHeaders\": true,\r\n                    \"uri\": \"https://api.chucknorris.io/jokes\",\r\n                    \"connectionTimeoutDuration\": 0,\r\n                    \"alias\": false\r\n                }\r\n            ],\r\n            \"apiName\": \"ChuckNorris\",\r\n            \"apiVersion\": \"1.0\",\r\n            \"apiDescription\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n            \"maturityState\": \"Beta\",\r\n            \"isActive\": false,\r\n            \"type\": \"REST\",\r\n            \"owner\": \"Administrator\",\r\n            \"policies\": [\r\n                \"08afbfa9-78e1-4c23-bb19-c0012464047e\"\r\n            ],\r\n            \"scopes\": [],\r\n            \"publishedPortals\": [],\r\n            \"creationDate\": \"2018-09-03 11:56:21 GMT\",\r\n            \"systemVersion\": 1,\r\n            \"id\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\"\r\n        },\r\n        \"responseStatus\": \"SUCCESS\",\r\n        \"versions\": [\r\n            {\r\n                \"versionNumber\": \"1.0\",\r\n                \"apiId\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\"\r\n       \r\n       }\r\n        ],\r\n        \"teams\": [\r\n            {\r\n                \"id\": \"Administrators\",\r\n                \"name\": \"Administrators\",\r\n                \"canDelete\": \"false\"\r\n            },\r\n            {\r\n                \"id\": \"Default\",\r\n                \"name\": \"Default\",\r\n                \"canDelete\": \"true\"\r\n            }\r\n        ]    }\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      },
      "put": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "This REST operation is used to update an API by importing a file, url or inline.\n\nWhile updating the API, visibility of the operations can be set by enabling or disabling the operations. Disabled operations will not be exposed to the customers. By default, all the operations are exposed to the consumers.\n\nWhen updating the API using file or url, API Gateway overwrite the resources/operations for the API. But it will retain the maturity state, scopes, visibility and if API mocking is enabled, then default mocked responses, mocked conditions and IS services will also be retained.",
        "consumes": [
          "application/json",
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "updateAPI",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to be updated",
            "name": "apiId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "x-example": true,
            "description": "When an API is updated using a URL / file, the existing tags will be overwritten if this value is true.",
            "name": "overwriteTags",
            "in": "query"
          },
          {
            "x-examples": {
              "application/json": "{\r\n            \"apiDefinition\": {\r\n                \"type\": \"rest\",\r\n                \"info\": {\r\n                    \"description\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n                    \"version\": \"1.0\",\r\n                    \"title\": \"ChuckNorrisAPI\"\r\n                },\r\n                \"host\": \"api.chucknorris.io\",\r\n                \"basePath\": \"/jokes\",\r\n                \"schemes\": [\r\n                    \"https\"\r\n                ],\r\n                \"security\": [],\r\n                \"paths\": {\r\n                    \"/random\": {\r\n                        \"get\": {\r\n                            \"summary\": \"GET\",\r\n                            \"description\": \"\",\r\n                            \"operationId\": \"GET\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {},\r\n                            \"enabled\": true\r\n                        },\r\n                        \"enabled\": true\r\n                    }\r\n                },\r\n                \"securityDefinitions\": {},\r\n                \"definitions\": {},\r\n                \"baseUriParameters\": [],\r\n                \"externalDocs\": [],\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"https://api.chucknorris.io/jokes\"\r\n                    }\r\n                ],\r\n                \"components\": {\r\n                    \"schemas\": {}\r\n                }\r\n            },\r\n            \"nativeEndpoint\": [\r\n                {\r\n                    \"passSecurityHeaders\": true,\r\n                    \"uri\": \"https://api.chucknorris.io/jokes\",\r\n                    \"connectionTimeoutDuration\": 0,\r\n                    \"alias\": false\r\n                }\r\n            ],\r\n            \"apiName\": \"ChuckNorris\",\r\n            \"apiVersion\": \"1.0\",\r\n            \"apiDescription\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n            \"maturityState\": \"Beta\",\r\n            \"isActive\": false,\r\n            \"type\": \"REST\",\r\n            \"owner\": \"Administrator\",\r\n            \"policies\": [\r\n                \"08afbfa9-78e1-4c23-bb19-c0012464047e\"\r\n            ],\r\n            \"scopes\": [],\r\n            \"publishedPortals\": [],\r\n            \"creationDate\": \"2018-09-03 11:56:21 GMT\",\r\n            \"systemVersion\": 1,\r\n            \"id\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\"\r\n        }"
            },
            "description": "API request payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GatewayAPI"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated API object",
            "schema": {
              "$ref": "#/definitions/APIResponseCreate"
            },
            "examples": {
              "application/json": "{\r\n    \"apiResponse\": {\r\n        \"api\": {\r\n            \"apiDefinition\": {\r\n                \"type\": \"rest\",\r\n                \"info\": {\r\n                    \"description\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n                    \"version\": \"1.0\",\r\n                    \"title\": \"ChuckNorrisAPI\"\r\n                },\r\n                \"host\": \"api.chucknorris.io\",\r\n                \"basePath\": \"/jokes\",\r\n                \"schemes\": [\r\n                    \"https\"\r\n                ],\r\n                \"security\": [],\r\n                \"paths\": {\r\n                    \"/random\": {\r\n                        \"get\": {\r\n                            \"summary\": \"GET\",\r\n                            \"description\": \"\",\r\n                            \"operationId\": \"GET\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {},\r\n                            \"enabled\": true\r\n                        },\r\n                        \"enabled\": true\r\n                    }\r\n                },\r\n                \"securityDefinitions\": {},\r\n                \"definitions\": {},\r\n                \"baseUriParameters\": [],\r\n                \"externalDocs\": [],\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"https://api.chucknorris.io/jokes\"\r\n                    }\r\n                ],\r\n                \"components\": {\r\n                    \"schemas\": {}\r\n                }\r\n            },\r\n            \"nativeEndpoint\": [\r\n                {\r\n                    \"passSecurityHeaders\": true,\r\n                    \"uri\": \"https://api.chucknorris.io/jokes\",\r\n                    \"connectionTimeoutDuration\": 0,\r\n                    \"alias\": false\r\n                }\r\n            ],\r\n            \"apiName\": \"ChuckNorris\",\r\n            \"apiVersion\": \"1.0\",\r\n            \"apiDescription\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n            \"maturityState\": \"Beta\",\r\n            \"isActive\": false,\r\n            \"type\": \"REST\",\r\n            \"owner\": \"Administrator\",\r\n            \"policies\": [\r\n                \"08afbfa9-78e1-4c23-bb19-c0012464047e\"\r\n            ],\r\n            \"scopes\": [],\r\n            \"publishedPortals\": [],\r\n            \"creationDate\": \"2018-09-03 11:56:21 GMT\",\r\n            \"systemVersion\": 1,\r\n            \"id\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\"\r\n        },\r\n        \"responseStatus\": \"SUCCESS\",\r\n        \"versions\": [\r\n            {\r\n                \"versionNumber\": \"1.0\",\r\n                \"apiId\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\"\r\n            }\r\n        ]\r\n    }\r\n}"
            }
          },
          "400": {
            "description": "This status code shows when the user missed the mandatory fields like type, file/url/apiDefinition in the request or provide a invalid request body"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      },
      "delete": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Delete the inactive API",
        "operationId": "deleteAPI",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to be deleted",
            "name": "apiId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "x-example": true,
            "description": "Flag for force delete. Required when API is associated with some applications",
            "name": "forceDelete",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the apiId along with the error when unsuccessful",
            "schema": {
              "$ref": "#/definitions/APIResponseDelete"
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "This response code returns when the deleted API is published to API portal or in active state"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API"
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      }
    },
    "/apis/{apiId}/activate": {
      "put": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Activate an API so that API is exposed to consumers",
        "produces": [
          "application/json"
        ],
        "operationId": "activateAPI",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to be activated",
            "name": "apiId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the API object after successful activation",
            "schema": {
              "$ref": "#/definitions/APIResponse"
            },
            "examples": {
              "application/json": "{\r\n    \"apiResponse\": {\r\n        \"api\": {\r\n            \"apiDefinition\": {\r\n                \"type\": \"rest\",\r\n                \"info\": {\r\n                    \"description\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n                    \"version\": \"1.0\",\r\n                    \"title\": \"ChuckNorrisAPI\"\r\n                },\r\n                \"host\": \"api.chucknorris.io\",\r\n                \"basePath\": \"/jokes\",\r\n                \"schemes\": [\r\n                    \"https\"\r\n                ],\r\n                \"security\": [],\r\n                \"paths\": {\r\n                    \"/random\": {\r\n                        \"get\": {\r\n                            \"summary\": \"GET\",\r\n                            \"description\": \"\",\r\n                            \"operationId\": \"GET\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {},\r\n                            \"enabled\": true\r\n                        },\r\n                        \"enabled\": true\r\n                    }\r\n                },\r\n                \"securityDefinitions\": {},\r\n                \"definitions\": {},\r\n                \"baseUriParameters\": [],\r\n                \"externalDocs\": [],\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"https://api.chucknorris.io/jokes\"\r\n                    }\r\n                ],\r\n                \"components\": {\r\n                    \"schemas\": {}\r\n                }\r\n            },\r\n            \"nativeEndpoint\": [\r\n                {\r\n                    \"passSecurityHeaders\": true,\r\n                    \"uri\": \"https://api.chucknorris.io/jokes\",\r\n                    \"connectionTimeoutDuration\": 0,\r\n                    \"alias\": false\r\n                }\r\n            ],\r\n            \"apiName\": \"ChuckNorris\",\r\n            \"apiVersion\": \"1.0\",\r\n            \"apiDescription\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n            \"maturityState\": \"Beta\",\r\n            \"isActive\": false,\r\n            \"type\": \"REST\",\r\n            \"owner\": \"Administrator\",\r\n            \"policies\": [\r\n                \"08afbfa9-78e1-4c23-bb19-c0012464047e\"\r\n            ],\r\n            \"scopes\": [],\r\n            \"publishedPortals\": [],\r\n            \"creationDate\": \"2018-09-03 11:56:21 GMT\",\r\n            \"systemVersion\": 1,\r\n            \"id\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\"\r\n        },\r\n        \"responseStatus\": \"SUCCESS\",\r\n        \"versions\": [\r\n            {\r\n                \"versionNumber\": \"1.0\",\r\n                \"apiId\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\"\r\n            }\r\n        ]\r\n    }\r\n}"
            }
          },
          "400": {
            "description": "This status code shows when the API is already in activated state or when no operations/resources are present or none are enabled"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      }
    },
    "/apis/{apiId}/applications": {
      "get": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Retrieves the list of registered applications of an API",
        "produces": [
          "application/json"
        ],
        "operationId": "getApplications",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to find the associated applications",
            "name": "apiId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of associated applications",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Application"
              }
            },
            "examples": {
              "application/json": "{\r\n  \"applications\": [\r\n    {\r\n      \"name\": \"app1\",\r\n      \"description\": null,\r\n      \"contactEmails\": [],\r\n      \"identifiers\": [],\r\n      \"siteURLs\": [],\r\n      \"version\": \"1.0\",\r\n      \"id\": \"ae48cd69-421e-4bdf-a4d0-e86996a78f68\",\r\n      \"created\": \"2017-03-13 13:12:03 GMT\",\r\n      \"lastupdated\": null,\r\n      \"consumingAPIs\": [\r\n        \"25fb937a-8360-41ab-8be5-987b14fe631d\"\r\n      ],\r\n      \"accessTokens\": {\r\n        \"apiAccessKey_credentials\": {\r\n          \"apiAccessKey\": \"cec4b46b-3569-4f73-a561-172dd67c182a\",\r\n          \"expirationInterval\": null\r\n        },\r\n        \"oauth_credentials\": {\r\n          \"clientID\": \"40b78ed3-d171-4bd3-99db-51dd2fa71753\",\r\n          \"clientSecret\": \"024b9525-6526-45c8-a66c-d192442064e1\",\r\n          \"clientName\": \"app1-6b753c2a-0567-462d-a4ea-1b143ab7a381\",\r\n          \"scopes\": [\r\n            \"25fb937a-8360-41ab-8be5-987b14fe631d\"\r\n          ],\r\n          \"token_lifetime\": \"3600\",\r\n          \"token_refresh_limit\": \"0\",\r\n          \"redirect_uris\": [\r\n            \"https://placeholder_redirect_uri\"\r\n          ],\r\n          \"Type\": \"confidential\"\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      }
    },
    "/apis/{apiId}/deactivate": {
      "put": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Deactivate an API so that API is not exposed to consumers",
        "produces": [
          "application/json"
        ],
        "operationId": "deactivateAPI",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to be deactivated",
            "name": "apiId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the API object after successful deactivation",
            "schema": {
              "$ref": "#/definitions/APIResponse"
            },
            "examples": {
              "application/json": "{\r\n    \"apiResponse\": {\r\n        \"api\": {\r\n            \"apiDefinition\": {\r\n                \"type\": \"rest\",\r\n                \"info\": {\r\n                    \"description\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n                    \"version\": \"1.0\",\r\n                    \"title\": \"ChuckNorrisAPI\"\r\n                },\r\n                \"host\": \"api.chucknorris.io\",\r\n                \"basePath\": \"/jokes\",\r\n                \"schemes\": [\r\n                    \"https\"\r\n                ],\r\n                \"security\": [],\r\n                \"paths\": {\r\n                    \"/random\": {\r\n                        \"get\": {\r\n                            \"summary\": \"GET\",\r\n                            \"description\": \"\",\r\n                            \"operationId\": \"GET\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {},\r\n                            \"enabled\": true\r\n                        },\r\n                        \"enabled\": true\r\n                    }\r\n                },\r\n                \"securityDefinitions\": {},\r\n                \"definitions\": {},\r\n                \"baseUriParameters\": [],\r\n                \"externalDocs\": [],\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"https://api.chucknorris.io/jokes\"\r\n                    }\r\n                ],\r\n                \"components\": {\r\n                    \"schemas\": {}\r\n                }\r\n            },\r\n            \"nativeEndpoint\": [\r\n                {\r\n                    \"passSecurityHeaders\": true,\r\n                    \"uri\": \"https://api.chucknorris.io/jokes\",\r\n                    \"connectionTimeoutDuration\": 0,\r\n                    \"alias\": false\r\n                }\r\n            ],\r\n            \"apiName\": \"ChuckNorris\",\r\n            \"apiVersion\": \"1.0\",\r\n            \"apiDescription\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n            \"maturityState\": \"Beta\",\r\n            \"isActive\": false,\r\n            \"type\": \"REST\",\r\n            \"owner\": \"Administrator\",\r\n            \"policies\": [\r\n                \"08afbfa9-78e1-4c23-bb19-c0012464047e\"\r\n            ],\r\n            \"scopes\": [],\r\n            \"publishedPortals\": [],\r\n            \"creationDate\": \"2018-09-03 11:56:21 GMT\",\r\n            \"systemVersion\": 1,\r\n            \"id\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\"\r\n        },\r\n        \"responseStatus\": \"SUCCESS\",\r\n        \"versions\": [\r\n            {\r\n                \"versionNumber\": \"1.0\",\r\n                \"apiId\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\"\r\n            }\r\n        ]\r\n    }\r\n}"
            }
          },
          "400": {
            "description": "This status code shows when the API is already in de-activated state"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      }
    },
    "/apis/{apiId}/gatewayEndpoints": {
      "put": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "This operation can be used to create / update / delete a custom gateway endpoing of an API",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "gatewayEndpoints",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to be updated",
            "name": "apiId",
            "in": "path",
            "required": true
          },
          {
            "x-examples": {
              "application/json": "{\r\n\t            \"gatewayEndpoints\": {\r\n\t                \"add\": { \r\n\t                    \"endpointName\" : \"name\", \r\n\t                    \"gatewayEndpoint\":\"/prefix/${apiName}/${apiVersion}\" \r\n\t                },\r\n\t                \"update\": { \r\n\t                \"oldEndpointName\" : \"oldName\", \r\n\t                    \"newEndpointName\" : \"newName\", \r\n\t                    \"gatewayEndpoint\" :\"/newPrefix/chocolateApi/${apiVersion}\" \r\n\t                },\r\n\t                \"remove\": { \r\n\t                    \"endpointName\":\"nameOfAnExistingEndpoint\"\r\n\t                }\r\n\t            }\r\n\t        }"
            },
            "description": "API Gateway endpoints request payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InputGatewayEndpoints"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns status of the operation along with request payload",
            "schema": {
              "$ref": "#/definitions/APIResponse"
            }
          },
          "400": {
            "description": "This status code shows when the user provide an invalid request body"
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      }
    },
    "/apis/{apiId}/globalPolicies": {
      "get": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Retrieves the list of active global policies applicable to this API",
        "produces": [
          "application/json"
        ],
        "operationId": "getAssociatedGlobalPolicies",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to find the list of applicable global policies",
            "name": "apiId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of global policy names",
            "schema": {
              "$ref": "#/definitions/APIResponseGetGlobalPolicies"
            },
            "examples": {
              "application/json": "{\r\n  \"globalPolicies\": [\r\n    \"GlobalLogInvocationPolicy\"\r\n  ]\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      }
    },
    "/apis/{apiId}/implementation": {
      "put": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "This operation can be used to update an API with its implementation endpoints details and optionally the corresponding maturity state after the implementation has been completed",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "notifyAPIImplementation",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to be updated",
            "name": "apiId",
            "in": "path",
            "required": true
          },
          {
            "x-examples": {
              "application/json": "{           \r\n\t\"nativeBaseURLs\" :     [\"https://localhost:5556/restv2/calc/v1\",       \"http://localhost:5555/restv2/calc/v1\"],                               \r\n\t\"maturityState\" : \"Implemented\"\r\n}"
            },
            "description": "API publish request payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InputAPIImplementation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated API object",
            "schema": {
              "$ref": "#/definitions/APIResponse"
            }
          },
          "400": {
            "description": "This status code shows when the user missed the mandatory fields like type, file/url/apiDefinition in the request or provide a invalid request body"
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      }
    },
    "/apis/{apiId}/mock/disable": {
      "put": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Once API is disabled from mocking capability, at runtime all the API invocations are redirected to the native service instead of sending the mocked response",
        "produces": [
          "application/json"
        ],
        "operationId": "disableMockAPI",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to be deactivated",
            "name": "apiId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the API object after successful disabling mocking of an API",
            "schema": {
              "$ref": "#/definitions/APIResponse"
            },
            "examples": {
              "application/json": "{\r\n    \"apiResponse\": {\r\n        \"api\": {\r\n            \"apiDefinition\": {\r\n                \"type\": \"rest\",\r\n                \"info\": {\r\n                    \"description\": \"API to demonstrate mocking functionality in international developers day\",\r\n                    \"version\": \"v1\",\r\n                    \"title\": \"API_MOCKING\"\r\n                },\r\n                \"host\": \"localhost\",\r\n                \"schemes\": [\r\n                    \"http\"\r\n                ],\r\n                \"consumes\": [\r\n                    \"application/json\"\r\n                ],\r\n                \"security\": [],\r\n                \"paths\": {\r\n                    \"/conditionBasedMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Configure condition and mocked response\",\r\n                            \"operationId\": \"conditionBasedMockedResponse\",\r\n                            \"produces\": [\r\n                                \"text/plain\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\",\r\n                                    \"content\": {\r\n                                        \"text/plain\": {\r\n                                            \"example\": \"No condition evaluates to true. \\nSo API-Gateway sent this default response.\"\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"text/plain\": \"No condition evaluates to true. \\nSo API-Gateway sent this default response.\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/conditionBasedMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/customESBMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Configure custom ESB mocked response\",\r\n                            \"operationId\": \"customESBMockedResponse\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\"\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/customESBMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/dynamicMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Dynamic mocked response set\",\r\n                            \"operationId\": \"dynamicMockedResponse\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\"\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/dynamicMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/staticMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Default mocked response from example\",\r\n                            \"operationId\": \"generateFromExample\",\r\n                            \"produces\": [\r\n                                \"application/json\",\r\n                                \"application/xml\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response generated from example\",\r\n                                    \"content\": {\r\n                                        \"application/json\": {\r\n                                            \"example\": \"{\\\"resource\\\" : \\\"/generateFromExample\\\",\\\"description\\\" : \\\"Default mocked response from example for status code 200\\\"}\"\r\n                                        },\r\n                                        \"application/xml\": {\r\n                                            \"example\": \"\u003croot\u003e\u003cresource\u003e/generateFromExample\u003c/resource\u003e\u003cdescription\u003eDefault mocked response from example for status code 200\u003c/description\u003e\u003c/root\u003e\"\r\n                                        }\r\n                                    }\r\n                                },\r\n                                \"201\": {\r\n                                    \"description\": \"201 response generated from schema\",\r\n                                    \"content\": {\r\n                                        \"application/json\": {\r\n                                            \"schema\": {\r\n                                                \"$ref\": \"#/components/schemas/Pet\"\r\n                                            }\r\n                                        },\r\n                                        \"application/xml\": {\r\n                                            \"schema\": {\r\n                                                \"$ref\": \"#/components/schemas/Pet\"\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"{\\\"resource\\\" : \\\"/generateFromExample\\\",\\\"description\\\" : \\\"Default mocked response from example for status code 200\\\"}\",\r\n                                        \"application/xml\": \"\u003croot\u003e\u003cresource\u003e/generateFromExample\u003c/resource\u003e\u003cdescription\u003eDefault mocked response from example for status code 200\u003c/description\u003e\u003c/root\u003e\"\r\n                                    }\r\n                                },\r\n                                \"201\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"{\\\"birthday\\\":2059397944,\\\"name\\\":\\\"\\\"}\",\r\n                                        \"application/xml\": \"\u003cbirthday\u003e921604684\u003c/birthday\u003e\u003cname/\u003e\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/staticMockedResponse\",\r\n                        \"enabled\": true\r\n                    }\r\n                },\r\n                \"securityDefinitions\": {},\r\n                \"definitions\": {},\r\n                \"baseUriParameters\": [],\r\n                \"externalDocs\": [],\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"http://localhost\"\r\n                    }\r\n                ],\r\n                \"components\": {\r\n                    \"schemas\": {\r\n                        \"Pet\": {\r\n                            \"required\": [\r\n                                \"name\"\r\n                            ],\r\n                            \"type\": \"object\",\r\n                            \"properties\": {\r\n                                \"birthday\": {\r\n                                    \"type\": \"integer\",\r\n                                    \"format\": \"int32\"\r\n                                },\r\n                                \"name\": {\r\n                                    \"type\": \"string\"\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"nativeEndpoint\": [\r\n                {\r\n                    \"passSecurityHeaders\": true,\r\n                    \"uri\": \"http://localhost\",\r\n                    \"connectionTimeoutDuration\": 0,\r\n                    \"alias\": false\r\n                }\r\n            ],\r\n            \"apiName\": \"APIMocking\",\r\n            \"apiVersion\": \"v1\",\r\n            \"apiDescription\": \"API to demonstrate mocking functionality in international developers day\",\r\n            \"maturityState\": \"Beta\",\r\n            \"isActive\": false,\r\n            \"type\": \"REST\",\r\n            \"owner\": \"Administrator\",\r\n            \"policies\": [\r\n                \"19773e29-2838-4efc-aa04-793b48f4d22b\"\r\n            ],\r\n            \"scopes\": [],\r\n            \"publishedPortals\": [],\r\n            \"creationDate\": \"2018-11-01 13:44:58 GMT\",\r\n            \"systemVersion\": 1,\r\n            \"mockService\": {\r\n                \"enableMock\": false\r\n            },\r\n            \"id\": \"afd8eb5e-bba8-447b-8e28-76aac23ba074\"\r\n        },\r\n        \"responseStatus\": \"SUCCESS\",\r\n        \"versions\": [\r\n            {\r\n                \"versionNumber\": \"v1\",\r\n                \"apiId\": \"afd8eb5e-bba8-447b-8e28-76aac23ba074\"\r\n            }\r\n        ]\r\n    }\r\n}"
            }
          },
          "400": {
            "description": "This status code shows when the API is already in activated state or in mocked state"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      }
    },
    "/apis/{apiId}/mock/enable": {
      "put": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "In API Gateway, you can mock an API implementation. API Gateway lets you mock an API by simulating the native service. API Mocking is useful feature in API first approach, where in the provider may choose to expose the mocked API to the consumers when the actual API doesn't exist or isn't complete. \n In API Gateway, when you enable mocking for an API, a default mock response is created for each combination of resource, operation, status code and content-type based on the example and schema set in the API definition. As an API Provider, you can add or modify the default mock responses.\n\nYou can specify conditions at the operation level and configure IS services at the API level for a mocked API in the update API operation. At runtime, when the mocked API is invoked instead of calling the native service, API Gateway returns the mocked response to the consumer based on the below priorities:\n1. If any of the conditions for the invoked operation satisfies, API Gateway returns the associated mocked response.\n2. If no condition is specified or none of the condition for the invoked operation is satisfied, then API Gateway will return \na. the response from an IS service, if an IS service is configured b. default mocked response, if no IS services are configured",
        "produces": [
          "application/json"
        ],
        "operationId": "enableMockAPI",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to be activated",
            "name": "apiId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "x-example": true,
            "description": "Flag to retain generated mocked responses. When this is set to true, default mocked responses will be retained. If it's set to false, new default mocked responses will be generated using the examples, schema in the API",
            "name": "retainDefaultMockResponses",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the API object after successfully enabling mocking of an API",
            "schema": {
              "$ref": "#/definitions/APIResponse"
            },
            "examples": {
              "application/json": "{\r\n    \"apiResponse\": {\r\n        \"api\": {\r\n            \"apiDefinition\": {\r\n                \"type\": \"rest\",\r\n                \"info\": {\r\n                    \"description\": \"API to demonstrate mocking functionality in international developers day\",\r\n                    \"version\": \"v1\",\r\n                    \"title\": \"API_MOCKING\"\r\n                },\r\n                \"host\": \"localhost\",\r\n                \"schemes\": [\r\n                    \"http\"\r\n                ],\r\n                \"consumes\": [\r\n                    \"application/json\"\r\n                ],\r\n                \"security\": [],\r\n                \"paths\": {\r\n                    \"/conditionBasedMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Configure condition and mocked response\",\r\n                            \"operationId\": \"conditionBasedMockedResponse\",\r\n                            \"produces\": [\r\n                                \"text/plain\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\",\r\n                                    \"content\": {\r\n                                        \"text/plain\": {\r\n                                            \"example\": \"No condition evaluates to true. \\nSo API-Gateway sent this default response.\"\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"text/plain\": \"No condition evaluates to true. \\nSo API-Gateway sent this default response.\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/conditionBasedMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/customESBMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Configure custom ESB mocked response\",\r\n                            \"operationId\": \"customESBMockedResponse\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\"\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/customESBMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/dynamicMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Dynamic mocked response set\",\r\n                            \"operationId\": \"dynamicMockedResponse\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response\"\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/dynamicMockedResponse\",\r\n                        \"enabled\": true\r\n                    },\r\n                    \"/staticMockedResponse\": {\r\n                        \"post\": {\r\n                            \"summary\": \"Default mocked response from example\",\r\n                            \"operationId\": \"generateFromExample\",\r\n                            \"produces\": [\r\n                                \"application/json\",\r\n                                \"application/xml\"\r\n                            ],\r\n                            \"responses\": {\r\n                                \"200\": {\r\n                                    \"description\": \"200 response generated from example\",\r\n                                    \"content\": {\r\n                                        \"application/json\": {\r\n                                            \"example\": \"{\\\"resource\\\" : \\\"/generateFromExample\\\",\\\"description\\\" : \\\"Default mocked response from example for status code 200\\\"}\"\r\n                                        },\r\n                                        \"application/xml\": {\r\n                                            \"example\": \"\u003croot\u003e\u003cresource\u003e/generateFromExample\u003c/resource\u003e\u003cdescription\u003eDefault mocked response from example for status code 200\u003c/description\u003e\u003c/root\u003e\"\r\n                                        }\r\n                                    }\r\n                                },\r\n                                \"201\": {\r\n                                    \"description\": \"201 response generated from schema\",\r\n                                    \"content\": {\r\n                                        \"application/json\": {\r\n                                            \"schema\": {\r\n                                                \"$ref\": \"#/components/schemas/Pet\"\r\n                                            }\r\n                                        },\r\n                                        \"application/xml\": {\r\n                                            \"schema\": {\r\n                                                \"$ref\": \"#/components/schemas/Pet\"\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"mockedResponses\": {\r\n                                \"200\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"{\\\"resource\\\" : \\\"/generateFromExample\\\",\\\"description\\\" : \\\"Default mocked response from example for status code 200\\\"}\",\r\n                                        \"application/xml\": \"\u003croot\u003e\u003cresource\u003e/generateFromExample\u003c/resource\u003e\u003cdescription\u003eDefault mocked response from example for status code 200\u003c/description\u003e\u003c/root\u003e\"\r\n                                    }\r\n                                },\r\n                                \"201\": {\r\n                                    \"responseBody\": {\r\n                                        \"application/json\": \"{\\\"birthday\\\":2059397944,\\\"name\\\":\\\"\\\"}\",\r\n                                        \"application/xml\": \"\u003cbirthday\u003e921604684\u003c/birthday\u003e\u003cname/\u003e\"\r\n                                    }\r\n                                }\r\n                            },\r\n                            \"enabled\": true\r\n                        },\r\n                        \"parameters\": [],\r\n                        \"displayName\": \"/staticMockedResponse\",\r\n                        \"enabled\": true\r\n                    }\r\n                },\r\n                \"securityDefinitions\": {},\r\n                \"definitions\": {},\r\n                \"baseUriParameters\": [],\r\n                \"externalDocs\": [],\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"http://localhost\"\r\n                    }\r\n                ],\r\n                \"components\": {\r\n                    \"schemas\": {\r\n                        \"Pet\": {\r\n                            \"required\": [\r\n                                \"name\"\r\n                            ],\r\n                            \"type\": \"object\",\r\n                            \"properties\": {\r\n                                \"birthday\": {\r\n                                    \"type\": \"integer\",\r\n                                    \"format\": \"int32\"\r\n                                },\r\n                                \"name\": {\r\n                                    \"type\": \"string\"\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"nativeEndpoint\": [\r\n                {\r\n                    \"passSecurityHeaders\": true,\r\n                    \"uri\": \"http://localhost\",\r\n                    \"connectionTimeoutDuration\": 0,\r\n                    \"alias\": false\r\n                }\r\n            ],\r\n            \"apiName\": \"APIMocking\",\r\n            \"apiVersion\": \"v1\",\r\n            \"apiDescription\": \"API to demonstrate mocking functionality in international developers day\",\r\n            \"maturityState\": \"Beta\",\r\n            \"isActive\": false,\r\n            \"type\": \"REST\",\r\n            \"owner\": \"Administrator\",\r\n            \"policies\": [\r\n                \"19773e29-2838-4efc-aa04-793b48f4d22b\"\r\n            ],\r\n            \"scopes\": [],\r\n            \"publishedPortals\": [],\r\n            \"creationDate\": \"2018-11-01 13:44:58 GMT\",\r\n            \"systemVersion\": 1,\r\n            \"mockService\": {\r\n                \"enableMock\": true\r\n            },\r\n            \"id\": \"afd8eb5e-bba8-447b-8e28-76aac23ba074\"\r\n        },\r\n        \"responseStatus\": \"SUCCESS\",\r\n        \"versions\": [\r\n            {\r\n                \"versionNumber\": \"v1\",\r\n                \"apiId\": \"afd8eb5e-bba8-447b-8e28-76aac23ba074\"\r\n            }\r\n        ]\r\n    }\r\n}"
            }
          },
          "400": {
            "description": "This status code shows when the API is already in activated state or when invalid json or xml is provided in the example part of the operation"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      }
    },
    "/apis/{apiId}/providerspecification": {
      "get": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Downloads the provider specification of REST and SOAP based APIs. Provider specification is nothing but, the specification file (in swagger or wsdl format) with out the concrete API Gateway endpoint and contains all resources/methods/operation irrespective of whether they are exposed to consumer",
        "produces": [
          "application/json"
        ],
        "operationId": "downloadProviderSpecification",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to retrieve the versions",
            "name": "apiId",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "swagger",
              "wsdl"
            ],
            "type": "string",
            "x-example": "swagger",
            "description": "Output format of the API specification. For REST APIs the value is 'swagger'; for SOAP APIs use the value as 'wsdl'",
            "name": "format",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "If the format is swagger, returns the swagger content in json. If the format is wsdl, returns the wsdl content in xml.",
            "schema": {
              "$ref": "#/definitions/APIResponseGetAPI"
            }
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      }
    },
    "/apis/{apiId}/publish": {
      "put": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "This REST operation is used to publish API to the registered API Portal",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "publishAPI",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to be published",
            "name": "apiId",
            "in": "path",
            "required": true
          },
          {
            "x-examples": {
              "application/json": "{\r\n\t\"portalGatewayId\" : \"69bac781-6c60-4db3-86f7-50af3ec4963a\",\r\n\t\"communities\" : [\"3bdf8005-5685-3ef5-b132-de4681963fb6\"],\r\n\t\"endpoints\" : [\"https://api.chucknorris.io/jokes\"]\r\n}"
            },
            "description": "API publish request payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InputPublish"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the API object after successful publish",
            "schema": {
              "$ref": "#/definitions/APIResponseCreate"
            },
            "examples": {
              "application/json": "{\r\n  \"apiResponse\": {\r\n    \"api\": {\r\n      \"apiDefinition\": {\r\n        \"type\": \"rest\",\r\n        \"info\": {\r\n          \"vendorExtensions\": {},\r\n          \"description\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n          \"version\": \"1.0\",\r\n          \"title\": \"ChuckNorrisAPI\"\r\n        },\r\n        \"host\": \"api.chucknorris.io\",\r\n        \"basePath\": \"/jokes\",\r\n        \"schemes\": [\r\n          \"https\"\r\n        ],\r\n        \"paths\": {\r\n          \"/random\": {\r\n            \"get\": {\r\n              \"summary\": \"GET\",\r\n              \"description\": \"\",\r\n              \"operationId\": \"GET\",\r\n              \"produces\": [\r\n                \"application/json\"\r\n              ],\r\n              \"parameters\": [],\r\n              \"responses\": {},\r\n              \"enabled\": true\r\n            },\r\n            \"enabled\": true\r\n          }\r\n        },\r\n        \"definitions\": {}\r\n      },\r\n      \"nativeEndpoint\": [\r\n        {\r\n          \"passSecurityHeaders\": true,\r\n          \"uri\": \"https://api.chucknorris.io/jokes\",\r\n          \"connectionTimeoutDuration\": 0,\r\n          \"alias\": false\r\n        }\r\n      ],\r\n      \"apiName\": \"ChuckNorrisAPI\",\r\n      \"apiVersion\": \"1.0\",\r\n      \"apiDescription\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n      \"maturityState\": \"Beta\",\r\n      \"isActive\": false,\r\n      \"type\": \"REST\",\r\n      \"owner\": \"Administrator\",\r\n      \"policies\": [\r\n        \"879068cd-8628-4f2a-b903-4e6613ca12ba\"\r\n      ],\r\n      \"referencedFiles\": {\r\n        \"ChuckNorrisAPI.json\": \"{\\r\\n  \\\"swagger\\\": \\\"2.0\\\",\\r\\n  \\\"info\\\": {\\r\\n    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n    \\\"title\\\": \\\"ChuckNorrisAPI\\\",\\r\\n    \\\"version\\\": \\\"1.0\\\"\\r\\n  },\\r\\n  \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n  \\\"basePath\\\": \\\"/jokes\\\",\\r\\n  \\\"schemes\\\": [\\r\\n    \\\"https\\\"\\r\\n  ],\\r\\n  \\\"paths\\\": {\\r\\n    \\\"/random\\\": {\\r\\n      \\\"get\\\": {\\r\\n        \\\"summary\\\": \\\"GET\\\",\\r\\n        \\\"deprecated\\\": false,\\r\\n        \\\"produces\\\": [\\r\\n          \\\"application/json\\\"\\r\\n        ],\\r\\n        \\\"description\\\": \\\"\\\",\\r\\n        \\\"operationId\\\": \\\"GET\\\"\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n      },\r\n      \"scopes\": [],\r\n      \"publishedPortals\": [],\r\n      \"creationDate\": \"2017-03-13 09:38:30 GMT\",\r\n      \"systemVersion\": 1,\r\n      \"id\": \"25fb937a-8360-41ab-8be5-987b14fe631d\",\r\n      \"oauth2ScopeName\": \"25fb937a-8360-41ab-8be5-987b14fe631d\"\r\n    },\r\n    \"responseStatus\": \"SUCCESS\"\r\n  }\r\n}"
            }
          },
          "400": {
            "description": "This status code shows when the user missed the mandatory portalGatewayId or invalid portalGatewayId in the request body"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      }
    },
    "/apis/{apiId}/scopes": {
      "get": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "An API Scope is a collection of resources or operations in an API. Users can create multiple scopes for a single API. Policies can be attached to an API level or scope level. This method retrieves the scopes of an API.\n\nYou can create, modify or delete the scopes in the update API operation using PUT /api/{apiId}",
        "produces": [
          "application/json"
        ],
        "operationId": "getScopes",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to retrieve the versions",
            "name": "apiId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns API scopes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScopeResourceIndex"
              }
            },
            "examples": {
              "application/json": "{\r\n  \"scopeReferences\": [\r\n    {\r\n      \"references\": [\r\n        {\r\n          \"resourcePath\": \"/random\",\r\n          \"supportedOperations\": []\r\n        }\r\n      ],\r\n      \"scope\": {\r\n        \"name\": \"Get_Scopes\",\r\n        \"description\": \"Dummy description of the scope\",\r\n        \"policies\": [\r\n          \"db1a42f4-e038-4a1b-82f4-8fee6fbd5687\"\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      }
    },
    "/apis/{apiId}/scopes/{scopeName}": {
      "get": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Retrieve scopes of an API based on the scope name",
        "produces": [
          "application/json"
        ],
        "operationId": "getScopeByScopeName",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to retrieve the versions",
            "name": "apiId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-example": "getScope",
            "description": "Name of the scope",
            "name": "scopeName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns API scopes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ScopeResourceIndex"
              }
            },
            "examples": {
              "application/json": "{\r\n  \"scopeReferences\": [\r\n    {\r\n      \"references\": [\r\n        {\r\n          \"resourcePath\": \"/random\",\r\n          \"supportedOperations\": []\r\n        }\r\n      ],\r\n      \"scope\": {\r\n        \"name\": \"Get_Scopes\",\r\n        \"description\": \"Dummy description of the scope\",\r\n        \"policies\": [\r\n          \"db1a42f4-e038-4a1b-82f4-8fee6fbd5687\"\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway or scopeName is not found in the list of scopes"
          }
        }
      }
    },
    "/apis/{apiId}/source": {
      "get": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Download the API definition that was used to create the API. This is applicable only for SOAP APIs.",
        "produces": [
          "multipart/mixed"
        ],
        "operationId": "getSource",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to download the source content",
            "name": "apiId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the source files along with the root file name",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Multipart"
              }
            },
            "examples": {
              "multipart/mixed": "Message-ID: \u003c296841806.5.1489555643275.JavaMail.MRIZ@MCMRIZ01\u003e\r\nMIME-Version: 1.0\r\nContent-Type: multipart/mixed; \r\n\tboundary=\"----=_Part_4_1098332532.1489555643274\"\r\n\r\n------=_Part_4_1098332532.1489555643274\r\ncontent-type: application/zip\r\nContent-Disposition: attachment; filename=\"echoService.zip\"\r\n\r\nfile content in zip format\r\n------=_Part_4_1098332532.1489555643274\r\ncontent-type: text/plain\r\nContent-Disposition: inline; name=\"rootFileName\"\r\n\r\necho.wsdl\r\n------=_Part_4_1098332532.1489555643274--"
            }
          },
          "400": {
            "description": "This status code returns when the specified API is not a SOAP API"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      }
    },
    "/apis/{apiId}/unpublish": {
      "put": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Unpublish API from the registered API Portal",
        "produces": [
          "application/json"
        ],
        "operationId": "unpublishAPI",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to be unpublished",
            "name": "apiId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the API object after successful unpublish",
            "schema": {
              "$ref": "#/definitions/APIResponseCreate"
            },
            "examples": {
              "application/json": "{\r\n  \"apiResponse\": {\r\n    \"api\": {\r\n      \"apiDefinition\": {\r\n        \"type\": \"rest\",\r\n        \"info\": {\r\n          \"vendorExtensions\": {},\r\n          \"description\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n          \"version\": \"1.0\",\r\n          \"title\": \"ChuckNorrisAPI\"\r\n        },\r\n        \"host\": \"api.chucknorris.io\",\r\n        \"basePath\": \"/jokes\",\r\n        \"schemes\": [\r\n          \"https\"\r\n        ],\r\n        \"paths\": {\r\n          \"/random\": {\r\n            \"get\": {\r\n              \"summary\": \"GET\",\r\n              \"description\": \"\",\r\n              \"operationId\": \"GET\",\r\n              \"produces\": [\r\n                \"application/json\"\r\n              ],\r\n              \"parameters\": [],\r\n              \"responses\": {},\r\n              \"enabled\": true\r\n            },\r\n            \"enabled\": true\r\n          }\r\n        },\r\n        \"definitions\": {}\r\n      },\r\n      \"nativeEndpoint\": [\r\n        {\r\n          \"passSecurityHeaders\": true,\r\n          \"uri\": \"https://api.chucknorris.io/jokes\",\r\n          \"connectionTimeoutDuration\": 0,\r\n          \"alias\": false\r\n        }\r\n      ],\r\n      \"apiName\": \"ChuckNorrisAPI\",\r\n      \"apiVersion\": \"1.0\",\r\n      \"apiDescription\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n      \"maturityState\": \"Beta\",\r\n      \"isActive\": false,\r\n      \"type\": \"REST\",\r\n      \"owner\": \"Administrator\",\r\n      \"policies\": [\r\n        \"879068cd-8628-4f2a-b903-4e6613ca12ba\"\r\n      ],\r\n      \"referencedFiles\": {\r\n        \"ChuckNorrisAPI.json\": \"{\\r\\n  \\\"swagger\\\": \\\"2.0\\\",\\r\\n  \\\"info\\\": {\\r\\n    \\\"description\\\": \\\"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\\\",\\r\\n    \\\"title\\\": \\\"ChuckNorrisAPI\\\",\\r\\n    \\\"version\\\": \\\"1.0\\\"\\r\\n  },\\r\\n  \\\"host\\\": \\\"api.chucknorris.io\\\",\\r\\n  \\\"basePath\\\": \\\"/jokes\\\",\\r\\n  \\\"schemes\\\": [\\r\\n    \\\"https\\\"\\r\\n  ],\\r\\n  \\\"paths\\\": {\\r\\n    \\\"/random\\\": {\\r\\n      \\\"get\\\": {\\r\\n        \\\"summary\\\": \\\"GET\\\",\\r\\n        \\\"deprecated\\\": false,\\r\\n        \\\"produces\\\": [\\r\\n          \\\"application/json\\\"\\r\\n        ],\\r\\n        \\\"description\\\": \\\"\\\",\\r\\n        \\\"operationId\\\": \\\"GET\\\"\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n      },\r\n      \"scopes\": [],\r\n      \"publishedPortals\": [],\r\n      \"creationDate\": \"2017-03-13 09:38:30 GMT\",\r\n      \"systemVersion\": 1,\r\n      \"id\": \"25fb937a-8360-41ab-8be5-987b14fe631d\",\r\n      \"oauth2ScopeName\": \"25fb937a-8360-41ab-8be5-987b14fe631d\"\r\n    },\r\n    \"responseStatus\": \"SUCCESS\"\r\n  }\r\n}"
            }
          },
          "400": {
            "description": "This status code shows when the user missed the mandatory portalGatewayId or invalid portalGatewayId in the request body"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      }
    },
    "/apis/{apiId}/versions": {
      "get": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Retrieve all the versions of the API",
        "produces": [
          "application/json"
        ],
        "operationId": "getVersions",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to retrieve the versions",
            "name": "apiId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the API versions",
            "schema": {
              "$ref": "#/definitions/APIResponseGetAPIs"
            },
            "examples": {
              "application/json": "{\r\n    \"apiResponse\": {\r\n        \"api\": {\r\n            \"apiDefinition\": {\r\n                \"type\": \"rest\",\r\n                \"info\": {\r\n                    \"description\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n                    \"version\": \"1.0\",\r\n                    \"title\": \"ChuckNorrisAPI\"\r\n                },\r\n                \"host\": \"api.chucknorris.io\",\r\n                \"basePath\": \"/jokes\",\r\n                \"schemes\": [\r\n                    \"https\"\r\n                ],\r\n                \"security\": [],\r\n                \"paths\": {\r\n                    \"/random\": {\r\n                        \"get\": {\r\n                            \"summary\": \"GET\",\r\n                            \"description\": \"\",\r\n                            \"operationId\": \"GET\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {},\r\n                            \"enabled\": true\r\n                        },\r\n                        \"enabled\": true\r\n                    }\r\n                },\r\n                \"securityDefinitions\": {},\r\n                \"definitions\": {},\r\n                \"baseUriParameters\": [],\r\n                \"externalDocs\": [],\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"https://api.chucknorris.io/jokes\"\r\n                    }\r\n                ],\r\n                \"components\": {\r\n                    \"schemas\": {}\r\n                }\r\n            },\r\n            \"nativeEndpoint\": [\r\n                {\r\n                    \"passSecurityHeaders\": true,\r\n                    \"uri\": \"https://api.chucknorris.io/jokes\",\r\n                    \"connectionTimeoutDuration\": 0,\r\n                    \"alias\": false\r\n                }\r\n            ],\r\n            \"apiName\": \"ChuckNorris\",\r\n            \"apiVersion\": \"1.0\",\r\n            \"apiDescription\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n            \"maturityState\": \"Beta\",\r\n            \"isActive\": false,\r\n            \"type\": \"REST\",\r\n            \"owner\": \"Administrator\",\r\n            \"policies\": [\r\n                \"08afbfa9-78e1-4c23-bb19-c0012464047e\"\r\n            ],\r\n            \"scopes\": [],\r\n            \"publishedPortals\": [],\r\n            \"creationDate\": \"2018-09-03 11:56:21 GMT\",\r\n            \"systemVersion\": 1,\r\n            \"id\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\"\r\n        },\r\n        \"responseStatus\": \"SUCCESS\",\r\n        \"versions\": [\r\n            {\r\n                \"versionNumber\": \"1.0\",\r\n                \"apiId\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\"\r\n            }\r\n        ]\r\n    }\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that the apiId specified is not found in the API Gateway"
          }
        }
      },
      "post": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Create a new version of an API and retain applications if required",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "createVersion",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id for the API to be versioned",
            "name": "apiId",
            "in": "path",
            "required": true
          },
          {
            "x-examples": {
              "application/json": "{\r\n\t\"newApiVersion\" : \"v2\",\r\n\t\"retainApplications\" : true\r\n}"
            },
            "description": "Create version request payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InputVersion"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the newly created version of the API",
            "schema": {
              "$ref": "#/definitions/APIResponse"
            },
            "examples": {
              "application/json": "{\r\n    \"apiResponse\": {\r\n        \"api\": {\r\n            \"apiDefinition\": {\r\n                \"type\": \"rest\",\r\n                \"info\": {\r\n                    \"description\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n                    \"version\": \"1.0\",\r\n                    \"title\": \"ChuckNorrisAPI\"\r\n                },\r\n                \"host\": \"api.chucknorris.io\",\r\n                \"basePath\": \"/jokes\",\r\n                \"schemes\": [\r\n                    \"https\"\r\n                ],\r\n                \"security\": [],\r\n                \"paths\": {\r\n                    \"/random\": {\r\n                        \"get\": {\r\n                            \"summary\": \"GET\",\r\n                            \"description\": \"\",\r\n                            \"operationId\": \"GET\",\r\n                            \"produces\": [\r\n                                \"application/json\"\r\n                            ],\r\n                            \"responses\": {},\r\n                            \"enabled\": true\r\n                        },\r\n                        \"enabled\": true\r\n                    }\r\n                },\r\n                \"securityDefinitions\": {},\r\n                \"definitions\": {},\r\n                \"baseUriParameters\": [],\r\n                \"externalDocs\": [],\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"https://api.chucknorris.io/jokes\"\r\n                    }\r\n                ],\r\n                \"components\": {\r\n                    \"schemas\": {}\r\n                }\r\n            },\r\n            \"nativeEndpoint\": [\r\n                {\r\n                    \"passSecurityHeaders\": true,\r\n                    \"uri\": \"https://api.chucknorris.io/jokes\",\r\n                    \"connectionTimeoutDuration\": 0,\r\n                    \"alias\": false\r\n                }\r\n            ],\r\n            \"apiName\": \"ChuckNorris\",\r\n            \"apiVersion\": \"1.0\",\r\n            \"apiDescription\": \"Chuck Norris facts are satirical factoids about martial artist and actor Chuck Norris that have become an Internet phenomenon and as a result have become widespread in popular culture. The 'facts' are normally absurd hyperbolic claims about Norris' toughness, attitude, virility, sophistication, and masculinity.\",\r\n            \"maturityState\": \"Beta\",\r\n            \"isActive\": false,\r\n            \"type\": \"REST\",\r\n            \"owner\": \"Administrator\",\r\n            \"policies\": [\r\n                \"08afbfa9-78e1-4c23-bb19-c0012464047e\"\r\n            ],\r\n            \"scopes\": [],\r\n            \"publishedPortals\": [],\r\n            \"creationDate\": \"2018-09-03 11:56:21 GMT\",\r\n            \"systemVersion\": 1,\r\n            \"id\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\"\r\n        },\r\n        \"responseStatus\": \"SUCCESS\",\r\n        \"versions\": [\r\n            {\r\n                \"versionNumber\": \"1.0\",\r\n                \"apiId\": \"badc18e6-446f-4aa3-96cd-33e46bd40fb5\"\r\n            }\r\n        ]\r\n    }\r\n}"
            }
          },
          "400": {
            "description": "This status code returns when the specified api is not the latest version or if the newApiVersion is empty"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/integrationServer/publish": {
      "get": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Retrieve the integration server publish information for the API. Only REST and SOAP APIs are supported.",
        "produces": [
          "application/json"
        ],
        "operationId": "getIntegrationServerPublishInfo",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id of the API for which IntegrationServerPublishInfo is to be fetched",
            "name": "apiId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the integration server publish info for the API",
            "schema": {
              "$ref": "#/definitions/ServiceRegistryPublishGetResponse"
            }
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": "This status code indicates that Publish Info for the apiId specified is not found in API Gateway"
          }
        }
      },
      "put": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Publish one or more APIs to one or more integration servers. Only REST and SOAP APIs are supported.",
        "produces": [
          "application/json"
        ],
        "operationId": "publishToIntegrationServer",
        "parameters": [
          {
            "description": "Integration server publish payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InputIntegrationServerPublish"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the status of the publish operations given in the request.",
            "schema": {
              "$ref": "#/definitions/ServiceRegistryPublishPutResponse"
            }
          },
          "400": {
            "description": "This status code indicates an invalid request body"
          },
          "401": {
            "description": ""
          },
          "404": {
            "description": "This status code indicates that API with given apiId is not found in API Gateway"
          }
        }
      }
    },
    "/scopes": {
      "get": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "This method retrieves a list of available OAuth scope mappings in API Gateway. OAuth scope mappings map the authorization server scope with APIs or API scopes",
        "produces": [
          "application/json"
        ],
        "operationId": "getOAuthScopes",
        "responses": {
          "200": {
            "description": "This status code indicates that a list of the available OAuth scopes are retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/GatewayScope"
            },
            "examples": {
              "application/json": "{\r\n\t\"scopes\": [\r\n\t\t{\r\n\t\t\t\"id\": \"ef084e4a-c30b-40f5-8ed9-2a6b7fb6ca34\",\r\n\t\t\t\"scopeName\": \"scopeMapping2\",\r\n\t\t\t\"scopeDescription\": \"scopeMapping2 description\",\r\n\t\t\t\"audience\": \"audienceName\",\r\n\t\t\t\"apiScopes\": [\r\n\t\t\t\t\"911c700d-1344-4d3e-9495-4f4e93cc8cce\"\r\n\t\t\t],\r\n\t\t\t\"requiredAuthScopes\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"authServerAlias\": \"local\",\r\n\t\t\t\t\t\"scopeName\": \"scope1\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\": \"9f8f2cbb-e993-4935-aa3c-ee513c9badbb\",\r\n\t\t\t\"scopeName\": \"scopeMapping1\",\r\n\t\t\t\"scopeDescription\": \"scopeMapping1 description\",\r\n\t\t\t\"audience\": \"audienceName\",\r\n\t\t\t\"apiScopes\": [\r\n\t\t\t\t\"911c700d-1344-4d3e-9495-4f4e93cc8cce\"\r\n\t\t\t],\r\n\t\t\t\"requiredAuthScopes\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"authServerAlias\": \"local\",\r\n\t\t\t\t\t\"scopeName\": \"scope1\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        }
      },
      "post": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Use this method to create an OAuth scope mapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "createOAuthScope",
        "parameters": [
          {
            "x-examples": {
              "application/json": "{\r\n\t\"scopeName\": \"scopeMapping\",\r\n\t\"scopeDescription\": \"scopeMapping description\",\r\n\t\"apiScopes\": [\r\n\t\t\"911c700d-1344-4d3e-9495-4f4e93cc8cce\"\r\n\t],\r\n\t\"requiredAuthScopes\": [\r\n\t\t{\r\n\t\t\t\"authServerAlias\": \"local\",\r\n\t\t\t\"scopeName\": \"scope1\"\r\n\t\t}\r\n\t],\r\n\t\"audience\": \"audienceName\"\r\n}"
            },
            "description": "This parameter describes the request payload of an OAuth scope that is to be created in API Gateway.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GatewayScope"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This status code indicates that the OAuth scope has been successfully created in API Gateway.",
            "schema": {
              "$ref": "#/definitions/GatewayScope"
            },
            "examples": {
              "application/json": "{\r\n\t\"scope\": {\r\n\t\t\"id\": \"d550df0c-78c4-4139-918c-f354f77ccf9c\",\r\n\t\t\"scopeName\": \"scopeMapping\",\r\n\t\t\"scopeDescription\": \"scopeMapping description\",\r\n\t\t\"audience\": \"audienceName\",\r\n\t\t\"apiScopes\": [\r\n\t\t\t\"911c700d-1344-4d3e-9495-4f4e93cc8cce\"\r\n\t\t],\r\n\t\t\"requiredAuthScopes\": [\r\n\t\t\t{\r\n\t\t\t\t\"authServerAlias\": \"local\",\r\n\t\t\t\t\"scopeName\": \"scope1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}"
            }
          },
          "400": {
            "description": "This status code indicates that the input values given in the request body is wrong."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        }
      }
    },
    "/scopes/{oauthScopeId}": {
      "get": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "This method retrieves the requested OAuth scope mapping. OAuth scope mappings map the authorization server scope with APIs or API scopes",
        "produces": [
          "application/json"
        ],
        "operationId": "getOAuthScope",
        "parameters": [
          {
            "type": "string",
            "description": "The path parameter specifies the id of an OAuth scope mapping that is to be retrieved from API Gateway.",
            "name": "oauthScopeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the details of the specified OAuth scope are retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/GatewayScope"
            },
            "examples": {
              "application/json": "{\r\n\t\"scope\": {\r\n\t\t\"id\": \"51143fe6-7790-4c58-aa66-e4f2f0f2e3cd\",\r\n\t\t\"scopeName\": \"scopeMapping1\",\r\n\t\t\"scopeDescription\": \"scopeMapping1\",\r\n\t\t\"audience\": \"\",\r\n\t\t\"apiScopes\": [\r\n\t\t\t\"911c700d-1344-4d3e-9495-4f4e93cc8cce\"\r\n\t\t],\r\n\t\t\"requiredAuthScopes\": [\r\n\t\t\t{\r\n\t\t\t\t\"authServerAlias\": \"local\",\r\n\t\t\t\t\"scopeName\": \"scope1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that an OAuth scope with the given ID could not be found in API Gateway."
          }
        }
      },
      "put": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Use this method to update an OAuth scope mapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "updateOAuthScope",
        "parameters": [
          {
            "x-examples": {
              "application/json": "{\r\n\t\"scopeName\": \"scopeMapping1\",\r\n\t\"scopeDescription\": \"scopeMapping1 description\",\r\n\t\"apiScopes\": [\r\n\t\t\"911c700d-1344-4d3e-9495-4f4e93cc8cce\"\r\n\t],\r\n\t\"requiredAuthScopes\": [\r\n\t\t{\r\n\t\t\t\"authServerAlias\": \"local\",\r\n\t\t\t\"scopeName\": \"scope1\"\r\n\t\t}\r\n\t],\r\n\t\"audience\": \"\"\r\n}"
            },
            "description": "This parameter describes the request payload of an OAuth scope that is to be updated in API Gateway.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GatewayScope"
            }
          },
          {
            "type": "string",
            "description": "The path parameter specifies the id of an OAuth scope mapping that is to be updated in API Gateway.",
            "name": "oauthScopeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This status code indicates that the OAuth scope has been successfully updated in API Gateway.",
            "schema": {
              "$ref": "#/definitions/GatewayScope"
            },
            "examples": {
              "application/json": "{\r\n\t\"scope\": {\r\n\t\t\"id\": \"51143fe6-7790-4c58-aa66-e4f2f0f2e3cd\",\r\n\t\t\"scopeName\": \"scopeMapping1\",\r\n\t\t\"scopeDescription\": \"scopeMapping1\",\r\n\t\t\"audience\": \"\",\r\n\t\t\"apiScopes\": [\r\n\t\t\t\"911c700d-1344-4d3e-9495-4f4e93cc8cce\"\r\n\t\t],\r\n\t\t\"requiredAuthScopes\": [\r\n\t\t\t{\r\n\t\t\t\t\"authServerAlias\": \"local\",\r\n\t\t\t\t\"scopeName\": \"scope1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}"
            }
          },
          "400": {
            "description": "This status code indicates that the input values given in the request body is wrong."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        }
      },
      "delete": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "This method deletes the requested OAuth scope mapping.",
        "produces": [
          "application/json"
        ],
        "operationId": "deleteOAuthScope",
        "parameters": [
          {
            "type": "string",
            "description": "The path parameter specifies the id of an OAuth scope mapping that is to be deleted from API Gateway.",
            "name": "oauthScopeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "This status code indicates that the specified OAuth scope has been successfully deleted from API Gateway."
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that an OAuth scope with the given ID could not be found in API Gateway."
          }
        }
      }
    },
    "/serviceRegistry/publish": {
      "get": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Retrieve the service registry publish information for the API",
        "produces": [
          "application/json"
        ],
        "operationId": "getServiceRegistryPublishInfo",
        "parameters": [
          {
            "type": "string",
            "x-example": "353bd366-47d4-4703-aecf-9cb40cdcc864",
            "description": "API Id of the API for which ServiceRegistryPublishInfo is to be fetched",
            "name": "apiId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the service registry publish info for the API",
            "schema": {
              "$ref": "#/definitions/ServiceRegistryPublishGetResponse"
            },
            "examples": {
              "application/json": "{\r\n  \"publishInfo\": {\r\n    \"apiId\": \"afe8b72e-e1a5-47c6-9b43-e7f12858c091\",\r\n    \"serviceRegistryPublishInfo\": [\r\n      {\r\n        \"serviceRegistryId\": \"aec973cd-1e4c-4a93-93a4-950e32d39156\",\r\n        \"status\": \"PUBLISHED\",\r\n        \"name\": \"MyServiceConsul\",\r\n        \"gatewayEndpoints\": [\r\n          {\r\n            \"gatewayEndpoint\": \"http://localhost:5555/ws/calc/1\",\r\n            \"status\": \"PUBLISHED\"\r\n          },\r\n          {\r\n            \"gatewayEndpoint\": \"http://localhost:1111/ws/calc/1\",\r\n            \"status\": \"NEW\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that Publish Info for the apiId specified is not found in API Gateway"
          }
        }
      },
      "put": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Publish one or more APIs to one or more service registries",
        "produces": [
          "application/json"
        ],
        "operationId": "publishToServiceRegistry",
        "parameters": [
          {
            "x-examples": {
              "application/json": "{\r\n  \"publishInfo\": {\r\n    \"serviceRegistryPublishInfo\": [\r\n      {\r\n        \"gatewayEndpoints\": [\r\n          {\r\n            \"gatewayEndpoint\": \"http://localhost:5555/ws/calc/1\"\r\n          }\r\n        ],\r\n        \"serviceRegistryId\": \"aec973cd-1e4c-4a93-93a4-950e32d39156\"\r\n      }\r\n    ],\r\n    \"apiId\": \"afe8b72e-e1a5-47c6-9b43-e7f12858c091\"\r\n  }\r\n}"
            },
            "description": "Service registry publish payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InputServiceRegistryPublish"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the status of the publish operations given in the request.",
            "schema": {
              "$ref": "#/definitions/ServiceRegistryPublishPutResponse"
            },
            "examples": {
              "application/json": "{\r\n  \"publishResponse\": {\r\n    \"apiId\": \"afe8b72e-e1a5-47c6-9b43-e7f12858c091\",\r\n    \"apiName\": \"CalcService\",\r\n    \"apiVersion\": \"10.3\",\r\n    \"serviceRegistryPublishResponses\": [\r\n      {\r\n        \"serviceRegistryId\": \"aec973cd-1e4c-4a93-93a4-950e32d39156\",\r\n        \"serviceRegistryName\": \"MyServiceConsul\",\r\n        \"status\": \"PUBLISHED\",\r\n        \"gatewayEndpoints\": [\r\n          {\r\n            \"gatewayEndpoint\": \"http://localhost:5555/ws/calc/1\",\r\n            \"status\": \"PUBLISHED\",\r\n          }\r\n        ],\r\n        \"success\": true,\r\n        \"description\": \"Publish successful\"\r\n      }\r\n    ]\r\n  }\r\n}"
            }
          },
          "400": {
            "description": "This status code indicates an invalid request body"
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          },
          "404": {
            "description": "This status code indicates that API with given apiId is not found in API Gateway"
          }
        }
      }
    },
    "/serviceRegistry/unpublish": {
      "put": {
        "security": [
          {
            "Basic": []
          }
        ],
        "description": "Unpublish one or more APIs from one or more service registries",
        "produces": [
          "application/json"
        ],
        "operationId": "unpublishFromServiceRegistry",
        "parameters": [
          {
            "x-examples": {
              "application/json": "{\r\n  \"unpublishInfo\": {\r\n    \"serviceRegistryIds\": [\r\n      \"aec973cd-1e4c-4a93-93a4-950e32d39156\"\r\n    ],\r\n    \"apiId\": \"afe8b72e-e1a5-47c6-9b43-e7f12858c091\"\r\n  },\r\n  \"forceUnpublish\": false\r\n}ds"
            },
            "description": "Service registry unpublish payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InputServiceRegistryUnpublish"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the service registry unpublish response",
            "schema": {
              "$ref": "#/definitions/ServiceRegistryUnpublishPutResponse"
            },
            "examples": {
              "application/json": "{\r\n  \"unpublishResponse\": {\r\n    \"apiId\": \"afe8b72e-e1a5-47c6-9b43-e7f12858c091\",\r\n    \"apiName\": \"CalcService\",\r\n    \"apiVersion\": \"10.3\",\r\n    \"serviceRegistryUnpublishResponses\": [\r\n      {\r\n        \"serviceRegistryId\": \"aec973cd-1e4c-4a93-93a4-950e32d39156\",\r\n        \"serviceRegistryName\": \"MyServiceConsul\",\r\n        \"success\": true,\r\n        \"description\": \" Unpublish successful\"\r\n      }\r\n    ]\r\n  }\r\n}"
            }
          },
          "401": {
            "description": "This status code indicates that either user didn't provide right credentials or user doesn't have required privileges to access this API."
          }
        }
      }
    }
  },
  "definitions": {
    "API": {
      "type": "object",
      "properties": {
        "apiTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "serviceRegistryDisplayName": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uri": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "string"
        }
      },
      "discriminator": "type"
    },
    "APIAccessKey": {
      "type": "object",
      "properties": {
        "apiAccessKey": {
          "description": "API access key",
          "type": "string"
        },
        "expirationDate": {
          "description": "expiration date of the api key",
          "type": "string"
        },
        "expirationInterval": {
          "description": "expiration interval of the api key",
          "type": "string"
        }
      }
    },
    "APIResponse": {
      "type": "object",
      "properties": {
        "api": {
          "$ref": "#/definitions/GatewayAPI"
        },
        "apiId": {
          "type": "string"
        },
        "errorReason": {
          "type": "string"
        },
        "gatewayEndPointList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIResponseGatewayEndpoint"
          }
        },
        "gatewayEndPoints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "microgatewayEndPoints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "portalGatewayDataEntries": {
          "type": "object"
        },
        "pubSOAPFlavor": {
          "type": "string"
        },
        "reason": {
          "type": "object"
        },
        "responseStatus": {
          "type": "string",
          "enum": [
            "SUCCESS",
            "ERROR",
            "NOT_FOUND",
            "BAD_REQUEST",
            "PARTIAL_SUCCESS"
          ]
        },
        "restrictViewAsset": {
          "type": "boolean"
        },
        "rootFileLocation": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Team"
          }
        }
      }
    },
    "APIResponseCreate": {
      "type": "object",
      "properties": {
        "api": {
          "$ref": "#/definitions/GatewayAPI"
        },
        "apiId": {
          "type": "string"
        },
        "errorReason": {
          "type": "string"
        },
        "responseStatus": {
          "type": "string",
          "enum": [
            "SUCCESS",
            "ERROR",
            "NOT_FOUND",
            "BAD_REQUEST",
            "PARTIAL_SUCCESS"
          ]
        }
      }
    },
    "APIResponseDelete": {
      "type": "object",
      "properties": {
        "apiId": {
          "type": "string"
        },
        "errorReason": {
          "type": "string"
        },
        "responseStatus": {
          "type": "string",
          "enum": [
            "SUCCESS",
            "ERROR",
            "NOT_FOUND",
            "BAD_REQUEST",
            "PARTIAL_SUCCESS"
          ]
        }
      }
    },
    "APIResponseGatewayEndpoint": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "endpointDisplayName": {
          "type": "string"
        },
        "endpointName": {
          "type": "string"
        },
        "endpointType": {
          "type": "string",
          "enum": [
            "DEFAULT",
            "GLOBAL",
            "API_LEVEL",
            "MICRO_GATEWAY"
          ]
        },
        "endpointUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "APIResponseGetAPI": {
      "type": "object",
      "properties": {
        "api": {
          "$ref": "#/definitions/GatewayAPI"
        },
        "apiId": {
          "type": "string"
        },
        "errorReason": {
          "type": "string"
        },
        "gatewayEndPoints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "responseStatus": {
          "type": "string",
          "enum": [
            "SUCCESS",
            "ERROR",
            "NOT_FOUND",
            "BAD_REQUEST",
            "PARTIAL_SUCCESS"
          ]
        },
        "versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Version"
          }
        }
      }
    },
    "APIResponseGetAPIs": {
      "description": "This model contains the basics details of an API.",
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "apiId": {
          "type": "string"
        },
        "apiName": {
          "description": "API Name",
          "type": "string"
        },
        "apiVersion": {
          "description": "API Version",
          "type": "string"
        },
        "errorReason": {
          "type": "string"
        },
        "id": {
          "description": "API Id",
          "type": "string"
        },
        "publishedPortals": {
          "description": "Published portals of an API",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "responseStatus": {
          "type": "string",
          "enum": [
            "SUCCESS",
            "ERROR",
            "NOT_FOUND",
            "BAD_REQUEST",
            "PARTIAL_SUCCESS"
          ]
        },
        "systemVersion": {
          "description": "System version of an API",
          "type": "integer",
          "format": "int32"
        },
        "teams": {
          "description": "Contains teams belonging to an API.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Team"
          }
        },
        "type": {
          "description": "API Type",
          "type": "string"
        }
      }
    },
    "APIResponseGetGlobalPolicies": {
      "type": "object",
      "properties": {
        "globalPolicies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "APIResponseModel": {
      "description": "This model contains the basics details of an API.",
      "type": "object",
      "properties": {
        "api": {
          "$ref": "#/definitions/APIResponseGetAPIs"
        },
        "responseStatus": {
          "description": "Response status",
          "type": "string",
          "enum": [
            "CREATED",
            "SUCCESS",
            "ERROR",
            "UNEXPECTED_ERROR",
            "NOT_FOUND",
            "NO_CONTENT",
            "LOCKED",
            "UPDATED",
            "ACTIVATED",
            "DEACTIVATED",
            "PUBLISHED",
            "UNPUBLISHED"
          ]
        }
      }
    },
    "APIResponsesModel": {
      "description": "This model contains the basics details of all APIs.",
      "type": "object",
      "properties": {
        "apiResponse": {
          "description": "API Response",
          "type": "array",
          "items": {
            "$ref": "#/definitions/APIResponseModel"
          }
        }
      }
    },
    "Application": {
      "type": "object",
      "properties": {
        "accessTokens": {
          "$ref": "#/definitions/ApplicationToken"
        },
        "applicationID": {
          "description": "unique identifier of an application",
          "type": "string"
        },
        "authStrategyIds": {
          "description": "Contains a list of JWT/Oauth/OpenID authentication strategy ids associated to the application",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "contactEmails": {
          "description": "list of email contacts",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creationDate": {
          "description": "application creation time",
          "type": "string"
        },
        "description": {
          "description": "description of the application",
          "type": "string"
        },
        "iconbyteArray": {
          "description": "application icon byte array",
          "type": "string"
        },
        "identifiers": {
          "description": "list of all application identifiers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationIdentifier"
          }
        },
        "isSuspended": {
          "description": "holds the suspended state of an application",
          "type": "boolean"
        },
        "jsOrigins": {
          "description": "list of all javascript origins",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastModified": {
          "description": "last modified time of the application",
          "type": "string"
        },
        "lastUpdated": {
          "description": "last modified time of the application in milliseconds",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "name of the application",
          "type": "string"
        },
        "owner": {
          "description": "owner of the application",
          "type": "string"
        },
        "primaryNode": {
          "$ref": "#/definitions/Node"
        },
        "shell": {
          "type": "boolean"
        },
        "siteURLs": {
          "description": "list of all site URLs",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subscription": {
          "type": "boolean"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "ApplicationIdentifier": {
      "type": "object",
      "properties": {
        "id": {
          "description": "unique identifier of the application identifier",
          "type": "string"
        },
        "key": {
          "description": "identifier type",
          "type": "string"
        },
        "name": {
          "description": "name of the identifier",
          "type": "string"
        },
        "value": {
          "description": "list of identifier values",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ApplicationToken": {
      "type": "object",
      "properties": {
        "apiAccessKey": {
          "$ref": "#/definitions/APIAccessKey"
        },
        "oauth2Token": {
          "$ref": "#/definitions/OAuth2Token"
        }
      }
    },
    "AuthServerScope": {
      "description": "Represents the oauth scope from an authorization server",
      "type": "object",
      "properties": {
        "authServerAlias": {
          "description": "Name of the authorization server",
          "type": "string"
        },
        "scopeName": {
          "description": "OAuth scope name from authorization server definition",
          "type": "string"
        }
      }
    },
    "AuthorizationValue": {
      "type": "object",
      "properties": {
        "keyName": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "CommandInfo": {
      "type": "object",
      "properties": {
        "commandClass": {
          "type": "string"
        },
        "commandName": {
          "type": "string"
        }
      }
    },
    "DataFlavor": {
      "type": "object",
      "properties": {
        "defaultRepresentationClassAsString": {
          "type": "string"
        },
        "flavorJavaFileListType": {
          "type": "boolean"
        },
        "flavorRemoteObjectType": {
          "type": "boolean"
        },
        "flavorSerializedObjectType": {
          "type": "boolean"
        },
        "flavorTextType": {
          "type": "boolean"
        },
        "humanPresentableName": {
          "type": "string"
        },
        "mimeType": {
          "type": "string"
        },
        "mimeTypeSerializedObject": {
          "type": "boolean"
        },
        "primaryType": {
          "type": "string"
        },
        "representationClassByteBuffer": {
          "type": "boolean"
        },
        "representationClassCharBuffer": {
          "type": "boolean"
        },
        "representationClassInputStream": {
          "type": "boolean"
        },
        "representationClassReader": {
          "type": "boolean"
        },
        "representationClassRemote": {
          "type": "boolean"
        },
        "representationClassSerializable": {
          "type": "boolean"
        },
        "subType": {
          "type": "string"
        }
      }
    },
    "DataHandler": {
      "type": "object",
      "properties": {
        "allCommands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommandInfo"
          }
        },
        "content": {
          "type": "object"
        },
        "contentType": {
          "type": "string"
        },
        "dataSource": {
          "$ref": "#/definitions/DataSource"
        },
        "inputStream": {
          "$ref": "#/definitions/InputStream"
        },
        "name": {
          "type": "string"
        },
        "outputStream": {
          "$ref": "#/definitions/OutputStream"
        },
        "preferredCommands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommandInfo"
          }
        },
        "transferDataFlavors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataFlavor"
          }
        }
      }
    },
    "DataSource": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string"
        },
        "inputStream": {
          "$ref": "#/definitions/InputStream"
        },
        "name": {
          "type": "string"
        },
        "outputStream": {
          "$ref": "#/definitions/OutputStream"
        }
      }
    },
    "Endpoint": {
      "type": "object",
      "properties": {
        "alias": {
          "type": "boolean"
        },
        "connectionTimeoutDuration": {
          "type": "integer",
          "format": "int32"
        },
        "optimizationTechnique": {
          "type": "string"
        },
        "passSecurityHeaders": {
          "type": "boolean"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "Endpoints": {
      "description": "This defines the service registry publish information for API Gateway's API endpoints",
      "type": "object",
      "properties": {
        "gatewayEndpoint": {
          "description": "API's access endpoint exposed in API Gateway.",
          "type": "string"
        },
        "status": {
          "description": "Status of the API endpoint. Shows whether this endpoint is published to the service registry.Possible values are NEW, PUBLISHED and SUSPENDED. NEW represents the endpoint is not published to the service registry. PUBLISHED represents the endpoint is published to the service registry. SUSPENDED represents the endpoint is published to service registry, but is not currently active (for example: during deactivation of API or shutdown of API Gateway or disabling ports).",
          "type": "string",
          "enum": [
            "NEW",
            "PUBLISHED",
            "SUSPENDED"
          ]
        }
      }
    },
    "Enumeration": {
      "type": "object"
    },
    "ExternalDocs": {
      "type": "object",
      "properties": {
        "description": {
          "description": "A short description of the target documentation",
          "type": "string"
        },
        "url": {
          "description": "The URL for the target documentation",
          "type": "string"
        },
        "vendorExtensions": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "GatewayAPI": {
      "type": "object",
      "properties": {
        "apiDefinition": {
          "$ref": "#/definitions/API"
        },
        "apiDescription": {
          "type": "string"
        },
        "apiDocuments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "apiEndpointPrefix": {
          "type": "string"
        },
        "apiGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "apiName": {
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        },
        "centraSiteURL": {
          "type": "string",
          "readOnly": true
        },
        "creationDate": {
          "type": "string",
          "readOnly": true
        },
        "gatewayEndpoints": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "id": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean",
          "readOnly": true
        },
        "lastModified": {
          "type": "string",
          "readOnly": true
        },
        "maturityState": {
          "type": "string"
        },
        "mockService": {
          "$ref": "#/definitions/MockService"
        },
        "nativeEndpoint": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Endpoint"
          },
          "readOnly": true
        },
        "nextVersion": {
          "type": "string",
          "readOnly": true
        },
        "oauth2ScopeName": {
          "type": "string"
        },
        "owner": {
          "type": "string",
          "readOnly": true
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "portalApiItemIdentifier": {
          "type": "string",
          "readOnly": true
        },
        "prevVersion": {
          "type": "string",
          "readOnly": true
        },
        "provider": {
          "type": "string",
          "readOnly": true
        },
        "publishedPortals": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publishedToRegistry": {
          "type": "boolean"
        },
        "rootFileName": {
          "type": "string",
          "readOnly": true
        },
        "scopes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Scope"
          }
        },
        "systemVersion": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "tracingEnabled": {
          "type": "boolean",
          "readOnly": true
        },
        "type": {
          "type": "string"
        }
      }
    },
    "GatewayScope": {
      "description": "Maps the authorization server scope with APIs or API scopes",
      "type": "object",
      "properties": {
        "apiScopes": {
          "description": "List of API IDs (or API Scope IDs) mapped the auth server scope",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "audience": {
          "description": "This field is optional. This value will be used in scope level audience matching",
          "type": "string"
        },
        "id": {
          "description": "A unique ID for the OAuth scope mapping",
          "type": "string"
        },
        "requiredAuthScopes": {
          "description": "List of oauth scope entries from the authorization server definition",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthServerScope"
          }
        },
        "scopeDescription": {
          "description": "Description for the OAuth scope mapping",
          "type": "string"
        },
        "scopeName": {
          "description": "Name of the OAuth scope mapping",
          "type": "string"
        }
      }
    },
    "InputAPI": {
      "type": "object",
      "required": [
        "apiName",
        "type"
      ],
      "properties": {
        "apiDefinition": {
          "$ref": "#/definitions/API"
        },
        "apiDescription": {
          "type": "string"
        },
        "apiName": {
          "type": "string"
        },
        "apiVersion": {
          "type": "string"
        },
        "authorizationValue": {
          "$ref": "#/definitions/AuthorizationValue"
        },
        "maturityState": {
          "type": "string"
        },
        "rootFileName": {
          "description": "Required when creating an API by importing protected URL",
          "type": "string"
        },
        "teams": {
          "description": "Contains teams to which the API must be assigned.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Team"
          }
        },
        "type": {
          "type": "string"
        },
        "url": {
          "description": "Required when creating an API by importing URL",
          "type": "string"
        }
      }
    },
    "InputAPIImplementation": {
      "type": "object",
      "properties": {
        "maturityState": {
          "type": "string"
        },
        "nativeBaseURLs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InputForAddGatewayEndpoint": {
      "description": "To add a new Gateway endpoint of this API",
      "type": "object",
      "properties": {
        "endpointName": {
          "description": "Name of the endpoint",
          "type": "string"
        },
        "gatewayEndpoint": {
          "description": "Gateway endpoint value",
          "type": "string"
        }
      }
    },
    "InputForGatewayEndpoints": {
      "description": "To manage gateway endpoints of an API",
      "type": "object",
      "properties": {
        "add": {
          "$ref": "#/definitions/InputForAddGatewayEndpoint"
        },
        "remove": {
          "$ref": "#/definitions/InputForRemoveGatewayEndpoint"
        },
        "update": {
          "$ref": "#/definitions/InputForUpdateGatewayEndpoint"
        }
      }
    },
    "InputForRemoveGatewayEndpoint": {
      "description": "To remove an existing Gateway endpoint of this API",
      "type": "object",
      "properties": {
        "endpointName": {
          "description": "Name of the endpoint",
          "type": "string"
        }
      }
    },
    "InputForUpdateGatewayEndpoint": {
      "description": "To update an existing Gateway endpoint of this API",
      "type": "object",
      "properties": {
        "gatewayEndpoint": {
          "description": "Gateway endpoint value to be updated",
          "type": "string"
        },
        "newEndpointName": {
          "description": "New name of the endpoint",
          "type": "string"
        },
        "oldEndpointName": {
          "description": "Existing name of the endpoint",
          "type": "string"
        }
      }
    },
    "InputGatewayEndpoints": {
      "type": "object",
      "properties": {
        "gatewayEndpoints": {
          "$ref": "#/definitions/InputForGatewayEndpoints"
        }
      }
    },
    "InputIntegrationServerPublish": {
      "type": "object",
      "properties": {
        "publishInfo": {
          "$ref": "#/definitions/PublishPayload"
        },
        "publishInfos": {
          "description": "This contains the publish information for multiple APIs. Required when publishing more than one API to one or more integration servers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublishPayload"
          }
        }
      }
    },
    "InputPublish": {
      "type": "object",
      "properties": {
        "communities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "endpoints": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "portalGatewayId": {
          "type": "string"
        }
      }
    },
    "InputServiceRegistryPublish": {
      "type": "object",
      "properties": {
        "publishInfo": {
          "$ref": "#/definitions/PublishPayload"
        },
        "publishInfos": {
          "description": "This contains the publish information for multiple APIs. Required when publishing more than one API to one or more service registries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublishPayload"
          }
        }
      }
    },
    "InputServiceRegistryUnpublish": {
      "type": "object",
      "properties": {
        "unpublishInfo": {
          "$ref": "#/definitions/UnpublishInfo"
        },
        "unpublishInfos": {
          "description": "This contains the unpublish information for multiple APIs. Required when publishing more than one API from one or more service registries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnpublishInfo"
          }
        }
      }
    },
    "InputStream": {
      "type": "object"
    },
    "InputVersion": {
      "type": "object",
      "required": [
        "newApiVersion"
      ],
      "properties": {
        "newApiVersion": {
          "type": "string"
        },
        "retainApplications": {
          "type": "boolean"
        }
      }
    },
    "IntegrationServerPublishInfo": {
      "type": "object",
      "properties": {
        "apiName": {
          "type": "string"
        },
        "contentModelComplianceForWSDL": {
          "type": "string"
        },
        "enableMTOM": {
          "type": "boolean"
        },
        "enforceWSICompliance": {
          "type": "boolean"
        },
        "folderName": {
          "description": "Name of the folder under the package (mentioned on 'packageName' property) in which the API to be published. This field is required.",
          "type": "string"
        },
        "importSwaggerBasedOnTags": {
          "type": "boolean"
        },
        "integrationServerId": {
          "description": "Uddi key of the integration server created in API Gateway. This field is required.",
          "type": "string"
        },
        "integrationServerName": {
          "type": "string"
        },
        "packageAndFolders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PackageFolderPair"
          }
        },
        "packageName": {
          "description": "Name of the package in the integration server in which the API to be published. This field is required.",
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "NEW",
            "PUBLISHED",
            "SUSPENDED"
          ]
        },
        "updateNativeEndpointsOfAPI": {
          "type": "boolean"
        },
        "validateSchemaWithXerces": {
          "type": "boolean"
        }
      }
    },
    "IntegrationServerPublishResponse": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Represents the status of the publish operation of the API to the service registry eg: Publish successful, Publish failed, etc",
          "type": "string"
        },
        "failureReason": {
          "description": "Provides the reason for the failure when the publish operation is not successful",
          "type": "string"
        },
        "integrationServerId": {
          "description": "Id i.e, UDDI key of the service registry",
          "type": "string"
        },
        "integrationServerName": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "NEW",
            "PUBLISHED",
            "SUSPENDED"
          ]
        },
        "success": {
          "description": "Represents whether the publish of API to the service registry is success. Possible values: true/false",
          "type": "boolean"
        }
      }
    },
    "MockService": {
      "type": "object",
      "properties": {
        "enableMock": {
          "type": "boolean"
        },
        "runAsUser": {
          "type": "string"
        },
        "service": {
          "type": "string"
        }
      }
    },
    "Multipart": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "parent": {
          "$ref": "#/definitions/Part"
        }
      }
    },
    "Node": {
      "type": "object",
      "properties": {
        "hostId": {
          "type": "string"
        },
        "replica": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "OAuth2Token": {
      "type": "object",
      "properties": {
        "clientId": {
          "description": "unique identifier of the oauth2 client",
          "type": "string"
        },
        "clientName": {
          "description": "the name of the client",
          "type": "string"
        },
        "clientSecret": {
          "description": "the client secret",
          "type": "string"
        },
        "expirationInterval": {
          "description": "the expiration interval",
          "type": "string"
        },
        "redirectUris": {
          "description": "list of redirect uris",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "refreshCount": {
          "description": "number of times an access token can be refreshed",
          "type": "string"
        },
        "scopes": {
          "description": "the scopes associated with the client",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "type of the oauth2 client",
          "type": "string"
        }
      }
    },
    "OutputStream": {
      "type": "object"
    },
    "PackageFolderPair": {
      "type": "object",
      "properties": {
        "apiDescriptorNSNameMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "folderName": {
          "type": "string"
        },
        "markedAsDeleted": {
          "type": "boolean"
        },
        "packageName": {
          "type": "string"
        }
      }
    },
    "Part": {
      "type": "object",
      "properties": {
        "allHeaders": {
          "$ref": "#/definitions/Enumeration"
        },
        "content": {
          "type": "object"
        },
        "contentType": {
          "type": "string"
        },
        "dataHandler": {
          "$ref": "#/definitions/DataHandler"
        },
        "description": {
          "type": "string"
        },
        "disposition": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "inputStream": {
          "$ref": "#/definitions/InputStream"
        },
        "lineCount": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PublishPayload": {
      "type": "object",
      "properties": {
        "apiId": {
          "description": "API id for the API to be published. This field is required. The API will be published to the service registry with the value configured in 'Service registry display name' field of the API",
          "type": "string"
        },
        "integrationServerPublishInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IntegrationServerPublishInfo"
          }
        },
        "serviceRegistryPublishInfo": {
          "description": "List of service registry publish information for the API. Each element of the list contains the publish information of the API for one service registry.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRegistryPublishInfo"
          }
        }
      }
    },
    "PublishResponse": {
      "type": "object",
      "properties": {
        "apiId": {
          "description": "API id of the API published.",
          "type": "string"
        },
        "apiName": {
          "description": "API name of the API published.",
          "type": "string"
        },
        "apiVersion": {
          "description": "API version of the API published.",
          "type": "string"
        },
        "integrationServerPublishResponses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IntegrationServerPublishResponse"
          }
        },
        "serviceRegistryPublishResponses": {
          "description": "Contains publish status of the API for each service registry in the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRegistryPublishResponse"
          }
        }
      }
    },
    "Scope": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "getoAuth2ScopeName": {
          "type": "string"
        },
        "mashedUpAPI": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ScopeInformation": {
      "type": "object",
      "properties": {
        "resourcePath": {
          "type": "string"
        },
        "supportedOperations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ScopeResourceIndex": {
      "type": "object",
      "properties": {
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScopeInformation"
          }
        },
        "scope": {
          "$ref": "#/definitions/Scope"
        }
      }
    },
    "ServiceRegistryPublishGetResponse": {
      "type": "object",
      "properties": {
        "publishInfo": {
          "$ref": "#/definitions/PublishPayload"
        }
      }
    },
    "ServiceRegistryPublishInfo": {
      "type": "object",
      "properties": {
        "gatewayEndpoints": {
          "description": "List of API endpoints of the API. Each element contains an endpoint and the information about the publish status of that endpoint for the current service registry.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Endpoints"
          }
        },
        "name": {
          "description": "Name of the service registry. This field is shown only in response and should not be sent by clients in requests. Only the serviceRegistryId is considered for uniquely identifying the registry.",
          "type": "string"
        },
        "serviceRegistryId": {
          "description": "Uddi key of the service registry created in API Gateway. This field is required.",
          "type": "string"
        },
        "status": {
          "description": "Publish Status of the API for this service registry. This field is shown only in response and should not be sent by clients in requests. Possible values are NEW, PUBLISHED and SUSPENDED. NEW represents the API is not published to the service registry. PUBLISHED represents the API is published to the service registry. SUSPENDED represents the API is published to service registry, but is not currently active (during deactivation of API or shutdown of API Gateway).",
          "type": "string",
          "enum": [
            "NEW",
            "PUBLISHED",
            "SUSPENDED"
          ]
        }
      }
    },
    "ServiceRegistryPublishPutResponse": {
      "type": "object",
      "properties": {
        "publishResponse": {
          "$ref": "#/definitions/PublishResponse"
        },
        "publishResponses": {
          "description": "This contains the service registry publish status for requests publishing more than one API to one or more service registries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublishResponse"
          }
        }
      }
    },
    "ServiceRegistryPublishResponse": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Represents the status of the publish operation of the API to the service registry eg: Publish successful, Publish failed, etc",
          "type": "string"
        },
        "failureReason": {
          "description": "Provides the reason for the failure when the publish operation is not successful",
          "type": "string"
        },
        "gatewayEndpoints": {
          "description": "List of API endpoints of the API. Each element contains an endpoint and the information about the publish status of that endpoint for the current service registry.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Endpoints"
          }
        },
        "serviceRegistryId": {
          "description": "Id i.e, UDDI key of the service registry",
          "type": "string"
        },
        "serviceRegistryName": {
          "description": "Name of the service registry",
          "type": "string"
        },
        "status": {
          "description": "Publish Status of the API for this service registry. Possible values are NEW, PUBLISHED and SUSPENDED. NEW represents the API is not published to the service registry. PUBLISHED represents the API is published to the service registry. SUSPENDED represents the API is published to service registry, but is not currently active (during deactivation of API or shutdown of API Gateway).",
          "type": "string",
          "enum": [
            "NEW",
            "PUBLISHED",
            "SUSPENDED"
          ]
        },
        "success": {
          "description": "Represents whether the publish of API to the service registry is success. Possible values: true/false",
          "type": "boolean"
        }
      }
    },
    "ServiceRegistryUnpublishPutResponse": {
      "type": "object",
      "properties": {
        "unpublishResponse": {
          "$ref": "#/definitions/UnpublishResponse"
        },
        "unpublishResponses": {
          "description": "This contains the service registry unpublish status for requests unpublishing more than one API from one or more service registries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnpublishResponse"
          }
        }
      }
    },
    "ServiceRegistryUnpublishResponse": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Represents the status of the unpublish operation of the API from the service registry eg: Unpublish successful, Unpublish failed, etc",
          "type": "string"
        },
        "failureReason": {
          "description": "Provides the reason for the failure when the unpublish operation is not successful",
          "type": "string"
        },
        "serviceRegistryId": {
          "description": "Id i.e, UDDI key of the service registry",
          "type": "string"
        },
        "serviceRegistryName": {
          "description": "Name of the service registry",
          "type": "string"
        },
        "success": {
          "description": "Represents whether the unpublish operation of API from the service registry is success. Possible values: true/false",
          "type": "boolean"
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "description": {
          "description": "A short description for the tag",
          "type": "string"
        },
        "externalDocs": {
          "$ref": "#/definitions/ExternalDocs"
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "vendorExtensions": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "Team": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Team id",
          "type": "string"
        },
        "name": {
          "description": "Team name",
          "type": "string"
        },
        "source": {
          "description": "The value is to identify whether the team is created from global team assignment or from user or by system",
          "type": "string",
          "enum": [
            "USER",
            "GLOBAL_ASSIGNMENT",
            "SYSTEM"
          ]
        }
      }
    },
    "UnpublishInfo": {
      "type": "object",
      "properties": {
        "apiId": {
          "description": "API id for the API to be unpublished. This field is required.",
          "type": "string"
        },
        "serviceRegistryIds": {
          "description": "List of ids of the service registries from which the API has to be unpublished. This field is required.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UnpublishResponse": {
      "type": "object",
      "properties": {
        "apiId": {
          "description": "API id of the API published.",
          "type": "string"
        },
        "apiName": {
          "description": "API name of the API published.",
          "type": "string"
        },
        "apiVersion": {
          "description": "API version of the API published.",
          "type": "string"
        },
        "serviceRegistryUnpublishResponses": {
          "description": "Contains unpublish status of the API for each service registry in the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRegistryUnpublishResponse"
          }
        }
      }
    },
    "Version": {
      "type": "object",
      "properties": {
        "apiId": {
          "type": "string"
        },
        "versionNumber": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Basic": {
      "description": "API Gateway Administrator and API Gateway provider",
      "type": "basic"
    }
  }
}